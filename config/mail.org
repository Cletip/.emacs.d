
Dans capture ? :



#+begin_src emacs-lisp

  ;;         ("c" "Contacts" entry (file "~/Org/contacts.org")
  ;;          "* %(org-contacts-template-name)
  ;; :PROPERTIES:
  ;; :EMAIL: %(org-contacts-template-email)
  ;; :END:")

#+end_src

flux rss reddit in gnus : https://www.reddit.com/r/emacs/comments/8boenu/looking_for_gnusrssreddit_guide/

** Général

#+begin_src emacs-lisp
  
  (setq user-mail-address "clement020302@gmail.com"
        user-full-name "Payard Clément"
        )

#+end_src

*** Paths

#+begin_src emacs-lisp
  (setq message-directory (no-littering-expand-var-file-name "Mail/")) ; As the default.
#+end_src

**** Functions

#+begin_src emacs-lisp :tangle no
  (setq send-mail-function 'smtpmail-send-it
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 465
        smtpmail-stream-type  'ssl)
#+end_src

** Envoie de message

email en asyncrous [[https://www.reddit.com/r/emacs/comments/101v46w/safer_async_email_sending_eg_mu4e/][ici]]

mettre un with-eval-after gnus ici ?
#+begin_src emacs-lisp

  (setq message-send-mail-function 'smtpmail-send-it)

  (setq smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 465
        smtpmail-stream-type  'ssl)

#+end_src




** TODO Org-msg, à ranger
** Gnus



[[https://youtu.be/jwz7aYUWIbM][voir les astuces de cette video, notamment org-captyre]]
[[https://www.youtube.com/watch?v=hbCXqDT1iNI][voir ici la vidéo]]

ou ce site : [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org][ici]]

iktvsaglxiajugrl

pour boite mail sur ordi (avec mbsync par exemple)
https://emacs.stackexchange.com/questions/34274/gnus-gmail-and-mbsync-do-i-need-dovecot

#+begin_src emacs-lisp
  (use-package gnus
    :straight (:type built-in)
#+end_src

Ne pas oublier la ligne dans le init.el

*** Configuration général
#+begin_src emacs-lisp
  :config
  (setq gnus-verbose 10);; activer le débugage
#+end_src

**** Raccourcis modifié

#+begin_src emacs-lisp
  (bind-key "<delete>" 'gnus-summary-delete-articlegnus-summary-delete-article gnus-summary-mode-map)
#+end_src


**** Raccourcis avec hydra

#+begin_src emacs-lisp
  (eval-after-load 'gnus-group
    '(progn
       (defhydra hydra-gnus-group (:color blue)
         "
  [_A_] Remote groups (A A) [_g_] Refresh
  [_L_] Local groups        [_\\^_] List servers
  [_c_] Mark all read       [_m_] Compose new mail
  [_G_] Search mails (G G) [_#_] Mark mail
  "
         ("A" gnus-group-list-active)
         ("L" gnus-group-list-all-groups)
         ("c" gnus-topic-catchup-articles)
         ("G" dianyou-group-make-nnir-group)
         ("g" gnus-group-get-new-news)
         ("^" gnus-group-enter-server-mode)
         ("m" gnus-group-new-mail)
         ("#" gnus-topic-mark-topic)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-group-mode-map "y" 'hydra-gnus-group/body)))

  ;; gnus-summary-mode
  (eval-after-load 'gnus-sum
    '(progn
       (defhydra hydra-gnus-summary (:color blue)
         "
  [_s_] Show thread   [_F_] Forward (C-c C-f)
  [_h_] Hide thread   [_e_] Resend (S D e)
  [_n_] Refresh (/ N) [_r_] Reply
  [_!_] Mail -> disk  [_R_] Reply with original
  [_d_] Disk -> mail  [_w_] Reply all (S w)
  [_c_] Read all      [_W_] Reply all with original (S W)
  [_#_] Mark          [_G_] Search mails
  "
         ("s" gnus-summary-show-thread)
         ("h" gnus-summary-hide-thread)
         ("n" gnus-summary-insert-new-articles)
         ("F" gnus-summary-mail-forward)
         ("!" gnus-summary-tick-article-forward)
         ("d" gnus-summary-put-mark-as-read-next)
         ("c" gnus-summary-catchup-and-exit)
         ("e" gnus-summary-resend-message-edit)
         ("R" gnus-summary-reply-with-original)
         ("r" gnus-summary-reply)
         ("W" gnus-summary-wide-reply-with-original)
         ("w" gnus-summary-wide-reply)
         ("#" gnus-topic-mark-topic)
         ("G" dianyou-group-make-nnir-group)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-summary-mode-map "y" 'hydra-gnus-summary/body)))

  ;; gnus-article-mode
  (eval-after-load 'gnus-art
    '(progn
       (defhydra hydra-gnus-article (:color blue)
         "
  [_o_] Save attachment        [_F_] Forward
  [_v_] Play video/audio       [_r_] Reply
  [_d_] CLI to download stream [_R_] Reply with original
  [_b_] Open external browser  [_w_] Reply all (S w)
  [_f_] Click link/button      [_W_] Reply all with original (S W)
  [_g_] Focus link/button
  "
         ("F" gnus-summary-mail-forward)
         ("r" gnus-article-reply)
         ("R" gnus-article-reply-with-original)
         ("w" gnus-article-wide-reply)
         ("W" gnus-article-wide-reply-with-original)
         ("o" gnus-mime-save-part)
         ("v" my-w3m-open-with-mplayer)
         ("d" my-w3m-download-rss-stream)
         ("b" my-w3m-open-link-or-image-or-url)
         ("f" w3m-lnum-follow)
         ("g" w3m-lnum-goto)
         ("q" nil))
       ;; y is not used by default
       (define-key gnus-article-mode-map "y" 'hydra-gnus-article/body)))

  ;; message-mode
  (eval-after-load 'message
    '(progn
       (defhydra hydra-message (:color blue)
         "
  [_c_] Complete mail address
  [_a_] Attach file
  [_s_] Send mail (C-c C-c)
  "
         ("c" counsel-bbdb-complete-mail)
         ("a" mml-attach-file)
         ("s" message-send-and-exit)
         ("i" dianyou-insert-email-address-from-received-mails)
         ("q" nil))))
#+end_src

**** Options utiles

#+begin_src emacs-lisp
  (setq gnus-interactive-exit nil
        gnus-nov-is-evil nil
        gnus-expert-user nil
        gnus-novice-user t
        )
#+end_src

**** gnus-select-method nil, car pas pratique (utiliser gnus-secondary-select-methods)

#+begin_src emacs-lisp
  (setq gnus-select-method '(nnnil))
#+end_src

**** Premier compte Gmail

#+begin_src emacs-lisp 

  ;; pas d'espace dans les noms
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "clement020302Gmail"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port 993)
                        (nnimap-stream ssl)
                        (nnir-search-engine imap)
    ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                        ;; press 'E' to expire email
                        (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                        (nnmail-expiry-wait 90)))
#+end_src




#+begin_src emacs-lisp :tangle no
  (add-to-list 'gnus-secondary-select-methods
               '(nnimap "First Gmail : clement020302@gmail"
                        (nnimap-address "imap.gmail.com")
                        (nnimap-server-port 993)
                        (nnimap-stream ssl)
                        (nnir-search-engine imap)
    ; @see http://www.gnu.org/software/emacs/manual/html_node/gnus/Expiring-Mail.html
                        ;; press 'E' to expire email
                        (nnmail-expiry-target "nnimap+gmail:[Gmail]/Trash")
                        (nnmail-expiry-wait 90)))
#+end_src

**** TODO Flux Rss
:LOGBOOK:
- State "TODO"       from              [2023-02-04 Sat 10:57]
:END:

gnus-newsrc-alist
gnus-topic-alist
  (gnus-group-make-group "Le monde" '(nnrss "" (nnrss-address "https://www.lemonde.fr/rss/une.xml")))

  (gnus-group-make-group "Le monde" '(nnrss ""))

  (nnrss-save-server-data nil)


#+begin_src emacs-lisp :tangle no

  (add-to-list 'gnus-secondary-select-methods '(nnrss "Le monde"
                                                      (nnrss-address "https://www.lemonde.fr/rss/une.xml")))

(add-to-list 'gnus-secondary-select-methods '(nntp "news.gwene.org"))


#+end_src

(add-to-list 'gnus-secondary-select-methods '(nnrss "le-monde-une"
(nnrss-url "https://www.lemonde.fr/rss/une.xml")))

(add-to-list 'gnus-secondary-select-methods '(nntp "le-monde-une"
              (nntp-address "www.lemonde.fr")
              (nntp-port-number 80)
              (nntp-streaming-mode t)
              (nntp-authentication-scheme 'anonymous)
              (nntp-subscribe-newsgroup "rss/une.xml")))




Test :

#+begin_src emacs-lisp :tangle no

  (setq nnrss-group-alist '((
                             "Le Monde.fr - Actualités et Infos en France et dans le monde"
                             "https://www.lemonde.fr/rss/une.xml"
                             "1er site d’information. Les articles du journal et toute l’actualité en continu"
                             )
                            ;; (
                            ;; "Le Monde.fr - Actualités et Infos en France et dans le monde"
                            ;; "https://www.lemonde.fr/rss/une.xml"
                            ;; "1er site d’information. Les articles du journal et toute l’actualité en continu"
                            ;; )
                            ))

  (add-to-list 'gnus-secondary-select-methods
               '(nnrss "Le monde"
                       (nnrss-address "https://www.lemonde.fr/rss/une.xml")))

  (nnrss-save-server-data nil)

  ;; (gnus-group-make-group "Le monde" '(nnrss "" (nnrss-address "https://www.lemonde.fr/rss/une.xml")))
#+end_src



    (setq nnrss-group-alist '((
                               "Le Monde.fr - Actualités et Infos en France et dans le monde"
                               "https://www.lemonde.fr/rss/une.xml"
                               "1er site d’information. Les articles du journal et toute l’actualité en continu"
                               )
                              ;; (
                              ;; "Le Monde.fr - Actualités et Infos en France et dans le monde"
                              ;; "https://www.lemonde.fr/rss/une.xml"
                              ;; "1er site d’information. Les articles du journal et toute l’actualité en continu"
                              ;; )
                              ))

**** Config (à déplacer ?/supprimer)

#+begin_src emacs-lisp :tangle no
  (setq gnus-select-method '(nnimap "imap.gmail.com")
        gnus-message-archive-group "Gmail]/Sent Mail"
        )

  ;; (add-to-list 'gnus-secondary-select-methods '(nntp "news.gmane.io"))
  ;; (add-to-list 'gnus-secondary-select-methods '(nntp "news.gnus.org"))

#+end_src


**** Pour du local avec mbsync

#+begin_src emacs-lisp

  ;;  pour du local avec isync ?
  ;; (setq gnus-secondary-select-methods
  ;; '((nnml "work" (nnml-directory "~/Mail.work/"))
  ;; (nnml "play" (nnml-directory "~/Mail.play/"))))

#+end_src

*** Fin config gnus

#+begin_src emacs-lisp
  )
#+end_src

** Mu4e

[[https://github.com/howardabrams/dot-files/blob/master/emacs-mail.org][lien sympas pour de la docs ?]]


*** Principal, pour voir les mails,
#+begin_src emacs-lisp :tangle no
  
;;  (setq mu4e-mu-binary "/home/msi/mu/mu")

  
  	;;   ;; :defer 20 ; Wait until 20 seconds after startup
	;;   :config
     (require 'mu4e)
	   ;; This is set to 't' to avoid mail syncing issues when using mbsync
	   (setq mu4e-change-filenames-when-moving t)
    
	   ;; Refresh mail using isync every 10 minutes
	   (setq mu4e-update-interval (* 10 60))
	   (setq mu4e-get-mail-command "mbsync -a")
	   (setq mu4e-maildir "~/Mail")
    
	   (setq mu4e-drafts-folder "/[Gmail]/Drafts")
	   (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
	   (setq mu4e-refile-folder "/[Gmail]/All Mail")
	   (setq mu4e-trash-folder  "/[Gmail]/Trash")
    
	   (setq mu4e-maildir-shortcuts
	       '(("/Inbox"             . ?i)
	    ("/[Gmail]/Sent Mail" . ?s)
	    ("/[Gmail]/Trash"     . ?t)
	    ("/[Gmail]/Drafts"    . ?d)
	    ("/[Gmail]/All Mail"  . ?a)))
    ;;)
#+end_src

Marche, mais pour la 26.3

  
  


(require 'mu4e)

  (require 'mu4e)  
  
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)
  
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")
  
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")
  
  (setq mu4e-maildir-shortcuts
	'(("/Inbox"             . ?i)
	  ("/[Gmail]/Sent Mail" . ?s)
	  ("/[Gmail]/Trash"     . ?t)
		("/[Gmail]/Drafts"    . ?d)
		("/[Gmail]/All Mail"  . ?a)))

*** Pour envoyer des mails

#+begin_src emacs-lisp :tangle no
  (setq smtpmail-smtp-server "smtp.gmail.com"
	smtpmail-smtp-service 465
	smtpmail-stream-type  'ssl)
  
  
  ;; Configure the function to use for sending mail
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src

*** TODO Alert lors de nouveaux mess



    (setq dw/mu4e-inbox-query
	"(maildir:/Personal/Inbox OR maildir:/Fastmail/INBOX) AND flag:unread")
    
  
  
  (use-package mu4e-alert
    :after mu4e
    :config
    ;; Show unread emails from all inboxes
    (setq mu4e-alert-interesting-mail-query dw/mu4e-inbox-query)
  
    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)
  
    (mu4e-alert-enable-notifications))

