

* Mon xah

** xah-fly-keys
#+begin_src emacs-lisp
  (use-package xah-fly-keys
    :straight (xah-fly-keys
               :type git
               :host github
               :repo "xahlee/xah-fly-keys")
    :config
    (require 'xah-fly-keys)
    ;; add optimot layout
    (push
     '("optimot" . (("-" . "^") ("'" . "à") ("," . "j") ("." . "o") (";" . "k") ("/" . "x") ("[" . "#") ("]" . "@") ("=" . "ç")
                    ("a" . "a") ("b" . "g") ("c" . "l") ("d" . "p") ("e" . "e") ("f" . "f") ("g" . "d") ("h" . "t") ("i" . ",")
                    ("j" . "è") ("k" . ".") ("l" . "q") ("m" . "c") ("n" . "r") ("o" . "i") ("p" . "é") ("q" . "y") ("r" . "'")
                    ("s" . "n") ("t" . "s") ("u" . "u") ("v" . "h") ("w" . "m")
                    ("x" . "w") ("y" . "b") ("z" . "v")
                    ("1" . "«") ("2" . "»") ("3" . "\"") ("4" . "-") ("5" . "+") ("6" . "*") ("7" . "/") ("8" . "=") ("9" . "(")
                    ("0" . ")") ("\\" . "ç") ("`" . "$")))
     xah-fly-layouts)
    ;; specify a layout
    (if termux-p
        (xah-fly-keys-set-layout "azerty")
      (xah-fly-keys-set-layout "optimot"))
    (xah-fly-keys 1))

#+end_src

** xah-fly-keys-layer
#+begin_src emacs-lisp

  (use-package xah-fly-keys-layer
    :after xah-fly-keys
    :straight (xah-fly-keys-layer
               :type git
               :host github
               :repo "Cletip/xah-fly-keys-layer")
    ;; :init

    :config

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-auto-command-mode
          '(recentf-cancel-dialog
            dashboard-jump-to-bookmarks
            org-agenda-show-dashboard
            dired-jump
            vertico-exit
            ace-link-eww
            debugger-quit
            ))
    (setq xah-fly-keys-layer-auto-insert-mode
          '(
            execute-extended-command-for-buffer
            org-meta-return
            org-insert-heading-respect-content
            org-insert-link
            recentf-open-files
            ;; org-capture ;; désactivé car fait bugguer !
            ))
    (require 'xah-fly-keys-layer-auto-mode)

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-better-place-isearch-forward t
          xah-fly-keys-layer-better-place-for-pinky-parens nil
          xah-fly-keys-layer-better-place-for-pinky-block t)
    (require 'xah-fly-keys-layer-better-place)

    ;;for all other extensions, you can change variable after require the extension

    (require 'xah-fly-keys-layer-better-remap)

    (setq xah-fly-keys-layer-isearch-forward-variable 'cp/consult-line-or-with-word
          xah-fly-keys-layer-ispell-word-variable 'flyspell-correct-wrapper
          xah-fly-keys-layer-xah-extend-selection-variable 'er/expand-region
          xah-fly-keys-layer-xah-open-file-at-cursor-variable 'cp/open-link
          xah-fly-keys-layer-recentf-open-files-variable 'consult-recent-file
          ;;since I don't use save-buffer, I prefer this
          xah-fly-keys-layer-save-buffer-variable 'avy-goto-char-2
          xah-fly-keys-layer-describe-function-variable 'helpful-symbol
          xah-fly-keys-layer-describe-variable-variable 'helpful-at-point)

    (require 'xah-fly-keys-layer-major-mode)
    ;; like default place, but change here if you want
    ;; (setq xah-fly-keys-layer-major-mode-key (xah-fly--convert-kbd-str "x"))

    ;; override a default keymap :
    (xah-fly--define-keys
     (define-prefix-command 'xah-fly-keys-layer-org-mode-keymap)
     '(("SPC" . org-mode-babel-keymap)

       ;; ("-" . "^") NOTE: this is a dead key
       ("'" . org-table-create-or-convert-from-region)
       ("," . org-mark-element)
       ("." . org-todo)
       (";" . org-toggle-narrow-to-subtree)
       ;; ("/" . "x")

       ;; ("[" . "=")
       ;; ("]" . "%")

       ;; ("=" . "ç")

       ("a" . org-export-dispatch)
       ;; ("b" . org-goto)
       ("b" . consult-org-heading) ;; mieux
       ("c" . org-insert-link)
       ("L" . org-store-link)
       ("d" . org-mode-keymap-movement)
       ("e" . org-meta-return)
       ;; ("E" . org-insert-todo-heading)
       ("f" . org-roam-ref-add)
       ("g" . org-roam-buffer-toggle)
       ("h" . vulpea-insert)
       ;; ("i" . ",")
       ("j" . org-deadline)
       ("k" . org-schedule)
       ("l" . "cp-vulpea-buffer-tags-remove-BROUILLON")
       ;; ("m" . org-insert-todo-heading)
       ("n" . vulpea-tags-add)
       ("o" . org-refile)
       ("p" . org-set-tags-command)
       ("q" . org-sort)
       ("r" . vulpea-meta-add)
       ("s" . citar-insert-citation)
       ;; ("t" . vulpea-find-backlink)
       ;; ("u" . org-capture-keymap) ;; TODO, mis dans SPC SPC
       ;; ("u" . org-capture)  ;; TODO changer

       ("v" . org-insert-todo-heading)
       ;; ("v" . cp-vulpea-meta-fait-add)
       ("w" . consult-org-roam-forward-links)
       ("x" . org-time-stamp)
       ;; ("y" . "b")
       ;; ("z" . "v")
       ))

    ;; load your personnal keymap with SPC SPC
    (require 'xah-fly-keys-layer-personal-keymap)
    (xah-fly--define-keys
     (define-prefix-command 'xah-fly-keys-layer-personal-key-map)
     '(("RET" . cp/org-open-or-finish-capture)
       ;; ("<up>"  . xah-move-block-up)
       ;; ("<down>"  . xah-move-block-down)
       ("'" . save-buffers-kill-emacs)
       ("," . emacs-restart)
       ("." . org-agenda)
       ;; ("0" . nil)
       ;; ("1" . nil)
       ;; ("2" . nil)
       ;; ("3" . nil)
       ;; ("4" . nil)
       ;; ("5" . nil)
       ;; ("6" . nil)
       ;; ("7" . nil)
       ;; ("8" . nil)
       ("9" . flycheck-grammalecte-correct-error-before-point)

       ("a" . engine-mode-prefixed-map)
       ;; ("b" . nil)
       ;; ("c" . nil)
       ;; ("d" . org-capture-keymap)
       ;; ("d" . helpful-at-point)
       ;; ("e" . nil)
       ("f" . org-next-link)
       ("g" . consult-org-roam-search)
       ("h" . cp/org-edit-special-src-dwim)
       ;; ("i" . nil)
       ("j" . org-next-link)
       ;; ("k" . nil)
       ;; ("l" . nil)
       ("m" . vulpea-find)
       ("n" . winner-undo)
       ;; ("o" . nil)
       ("p" . org-capture)
       ("q" . org-previous-link)
       ;; ("r" . nil)
       ;; ("s" . nil)
       ;; ("t" . cp/consult-ripgrep-with-directory)
       ("t" . consult-ripgrep)
       ;; ("u" . mode-specific-map)
       ("v" . magit-status)
       ("w" . ace-swap-window)
       ;; ("x" . nil)
       ;; ("y" . nil)
       ;; ("z" . nil)
       ))

    ;; change variable before require the extension
    (setq xah-fly-keys-layer-misc-enter-open-line t
          xah-fly-keys-layer-misc-autosave t
          xah-fly-keys-layer-embark t
          embark-cycle-key (xah-fly--convert-kbd-str "i"))
    (require 'xah-fly-keys-layer-misc)

    ;; try :

    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "z"
                                           'xah-forward-right-bracket)
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "v"
                                           'xah-goto-matching-bracket)
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "b"
                                           'xah-backward-left-bracket)


    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "i"
                                           'avy-goto-char-2)
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "p"
                                           'set-mark-command)
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "x"
                                           'embark-act)
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-command-map "'"
                                           'kill-word)

    (require 'xah-fly-keys-layer-major-mode)
    ;;try
    (setq xah-fly-keys-layer-major-mode-key (xah-fly--convert-kbd-str "y"))
    (require 'xah-fly-keys-layer-major-mode)

    ;; end of the package here
    )



#+end_src

** Mes ajouts persos, peut-être à mettre dans xah-fly-keys-layer

#+begin_src emacs-lisp

    ;; pop-global-mark with SPC 0
  (with-eval-after-load 'xah-fly-keys-layer
    (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-leader-key-map "0" 'pop-global-mark)
  )
#+end_src

** Avant, à supprimer un jour !
Fork de xah pour faire des modifications de mon côté


#+begin_src emacs-lisp :tangle no
  (use-package xah-fly-keys
    :straight (xah-fly-keys :type git :host github :repo "Cletip/xah-fly-keys"
                            :fork (:host github
                                         :repo "Cletip/xah-fly-keys"))
    ;; :custom
    ;; (xah-fork-cp-isearch-forward-function-name cp/consult-line-or-with-word)

    ;; (xah-fork-cp-isearch-forward-function-name consult-line)
    ;; (xah-fork-cp-recentf-function-name consult-recent-file)
    ;; (xah-fork-cp-ispell-word-function-name flyspell-auto-correct-previous-word)
    ;; (xah-fork-cp-xah-open-file-at-cursor-function-name cp/open-link)
    ;; (xah-fork-cp-xah-extend-selection-function-name er/expand-region)
    :config
    (setq xah-fork-cp-isearch-forward-function-name 'cp/consult-line-or-with-word)
    (setq xah-fork-cp-recentf-open-files-function-name 'consult-recent-file)

    ;; (setq xah-fork-cp-ispell-word-function-name 'flyspell-auto-correct-previous-word)
    (setq xah-fork-cp-ispell-word-function-name 'flyspell-correct-wrapper)

    (setq xah-fork-cp-xah-open-file-at-cursor-function-name 'cp/open-link)
    (setq xah-fork-cp-xah-extend-selection-function-name 'er/expand-region)
    ;; (setq xah-fork-cp-xah-extend-selection-function-name 'xah-extend-selection)

    ;; To disable both Control and Meta shortcut keys, add the following lines to you init.el before (require 'xah-fly-keys):

    (setq xah-fly-use-control-key nil)
    (setq xah-fly-use-meta-key nil)

    ;; choisir son clavier, important
    ;; lsusb | grep Omkbd\ ErgoDash ;;pour obtenir si le clavier est connecté
    ;; ou bien peut-être termux-usb -l
    (if termux-p
        (xah-fly-keys-set-layout "azerty")
      (xah-fly-keys-set-layout "beopy"))

    ;; Les hook	

    ;; TODO un jour faire pull request à xah
    ;; permet de mettre une touche qui fait open-line quand elle peut, sinon elle fait la touche entrée. À voir avec les commandes qui appele le
    (defun cp-xfk-addon-command (&rest args)
      "Modify keys for xah fly key command mode keys To be added to `xah-fly-command-mode-activate-hook'"
      (interactive)
      (define-key xah-fly-command-map (kbd "i")
        (if (or buffer-read-only
                (string-equal major-mode "minibuffer-mode")
                ;; (string-equal major-mode "org-agenda-mode")
                ;; (string-equal major-mode "fundamental-mode")
                )
            (kbd "RET")
          'open-line)))

    ;; (add-hook 'xah-fly-command-mode-activate-hook 'cp-xfk-addon-command)
    (add-to-list 'window-state-change-functions 'cp-xfk-addon-command)

    ;; (remove-hook 'xah-fly-command-mode-activate-hook 'cp-xfk-addon-command)

    (defvar cp/xfk-auto-command-mode-fns '()
      "List of functions to automatically call xah-fly-command-mode-activate on.")
    (setq cp/xfk-auto-command-mode-fns
          '(dashboard-jump-to-recents
            dashboard-jump-to-projects
            recentf-cancel-dialog
            dashboard-jump-to-bookmarks
            org-agenda-show-dashboard
            dashboard-jump-to-if-dashboardweekagenda-agenda-for-the-coming-week-agenda-for-today

            ;; pour le hook, et donc activer la touche entrée ou pas
            dired-jump
            vertico-exit

            ace-link-eww
            ;; More function names
            ))

    (defun cp/xfk-auto-command-mode-activate ()
      "Wires xah-fly-command-mode-activate to all functions from cp/xfk-auto-command-mode-fns."
      (dolist (element cp/xfk-auto-command-mode-fns)
        (advice-add element :after #'xah-fly-command-mode-activate)))
    (cp/xfk-auto-command-mode-activate)

    (defvar cp/xfk-auto-insert-mode-fns '()
      "List of functions to automatically call xah-fly-insert-mode-activate on.")
    (setq cp/xfk-auto-insert-mode-fns
          '(
            execute-extended-command-for-buffer
            org-meta-return
            org-insert-heading-respect-content
            org-insert-link
            recentf-open-files

            ;; org-capture ;; désactivé car fait bugguer !
            ;; eww ;; pour faire "ace-link-eww" direct après
            ;; More function names here
            ))

    (defun cp/xfk-auto-insert-mode-activate ()
      "Wires xah-fly-insert-mode-activate to all functions from cp/xfk-auto-insert-mode-fns."
      (dolist (element cp/xfk-auto-insert-mode-fns)
        (advice-add element :after #'xah-fly-insert-mode-activate)))
    (cp/xfk-auto-insert-mode-activate)

    ;;pour la commande xah-run-current-file
    (setq xah-run-current-file-hashtable
          #s(hash-table
             size 100
             test equal
             data
             (
              "clj" "clj"
              "go" "go run"
              "hs" "runhaskell"
              "java" "javac"
              "js" "deno run"
              "latex" "pdflatex"
              "m" "wolframscript -file"
              "mjs" "node --experimental-modules "
              "ml" "ocaml"
              "php" "php"
              "pl" "perl"
              "ps1" "pwsh"
              "py" "python3"
              "py2" "python2"
              "py3" "python3"
              "rb" "ruby"
              "rkt" "racket"
              "sh" "bash"
              "tex" "pdflatex"
              "ts" "deno run"
              "tsx" "tsc"
              "vbs" "cscript"
              "wl" "wolframscript -file"
              "wls" "wolframscript -file"
              ;; "pov" "/usr/local/bin/povray +R2 +A0.1 +J1.2 +Am2 +Q9 +H480 +W640"
              )))



    (xah-fly--define-keys
     (define-prefix-command 'layer-xah-fly-keys-personal-key-map)
     '(
       ("RET" . cp/org-open-or-finish-capture) ;;cp
       ;; ("<up>"  . xah-move-block-up)
       ;; ("<down>"  . xah-move-block-down)
       ("'" . save-buffers-kill-emacs)
       ("," . emacs-restart)
       ("." . org-agenda)

       ;; ("0" . nil)
       ;; ("1" . nil)
       ;; ("2" . nil)
       ;; ("3" . nil)
       ;; ("4" . nil)
       ;; ("5" . nil)
       ;; ("6" . nil)
       ;; ("7" . nil)
       ;; ("8" . nil)
       ("9" . flycheck-grammalecte-correct-error-before-point)

       ("a" . engine-mode-prefixed-map)
       ;; ("b" . nil)
       ;; ("c" . nil)
       ;; ("d" . org-capture-keymap)	 ;; TODO,
       ;; ("d" . org-capture)
       ("d" . helpful-at-point)
       ;; ("e" . nil)
       ("f" . org-next-link)

       ("g" . consult-org-roam-search)
       ("h" . cp/org-edit-special-src-dwim)
       ;; ("i" . nil)
       ("j" . org-next-link)
       ;; ("k" . nil)
       ;; ("l" . nil)
       ("m" . vulpea-find)
       ("n" . winner-undo)
       ;; ("o" . nil)
       ("p" . org-capture)
       ("q" . org-previous-link)
       ;; ("r" . nil)
       ;; ("s" . nil)
       ("t" . cp/consult-ripgrep-with-directory)
       ;; ("u" . mode-specific-map)
       ("v" . magit-status)
       ("w" . ace-swap-window)
       ;; ("x" . nil)
       ;; ("y" . nil)
       ("z" . tool-bar-mode)

       ;;
       ))

    )
#+end_src
* Mes nouvelles fonctions

** Ouvrir un lien

#+begin_src emacs-lisp
  (defun cp/open-link ()
    ""
    (interactive)
    (if (string-equal (org-agenda-open-link) "No link to open here")
        (xah-open-file-at-cursor)
       (org-agenda-open-link)))
#+end_src

** Nouvelle fonction de recherche

#+begin_src emacs-lisp
  (defun cp/consult-line-or-with-word ()
    "Call `consult-line' on current word or text selection.
              “word” here is A to Z, a to z, and hyphen 「-」 and underline 「_」, independent of syntax table.
              URL `http://xahlee.info/emacs/emacs/modernization_isearch.html'
              Version 2015-04-09"
    (interactive)
    (let ($p1 $p2)
      (if (use-region-p)
          (progn
            (message "salut")
            (setq $p1 (region-beginning))
            (setq $p2 (region-end)))
        (save-excursion
          (setq $p1 (point))
          (setq $p2 (point))))
      (setq mark-active nil)
      (when (< $p1 (point))
        (goto-char $p1))
      (consult-line (buffer-substring-no-properties $p1 $p2))))
#+end_src

** Insertion de tilde


#+begin_src emacs-lisp
(with-eval-after-load 'xah-fly-keys-layer
  (defun cp/xah-insert-tilde () (interactive) (xah-insert-bracket-pair "~" "~") ) (xah-fly-keys-layer-add-keys-to-keymap 'xah-fly-leader-key-map "e o" 'cp/xah-insert-tilde))
#+end_src
* Touche xah pour l'historique du mini-buffer


#+begin_src emacs-lisp

  (define-key minibuffer-mode-map [remap previous-line] #'previous-line-or-history-element)
  (define-key minibuffer-mode-map [remap next-line] #'next-line-or-history-element)

#+end_src
* TODO Mise en place des touches CTRL ALT etc en fonction du clavier
:LOGBOOK:
- State "TODO"       from              [2022-10-01 Sat 15:48]
:END:

** Les touches contrôles au bon endroit (fonction)



#+begin_src emacs-lisp

  (defun touches-controle-au-bon-endroit ()
    "Permet de mapper les touches contrôle aux endroit définit dans le fichier Xmodmap"
    (interactive)
    ;; (shell-command "setxkbmap -option caps:none")
    (shell-command "xmodmap ~/.dotfiles/fichiersSauvegardePc/Xmodmap")     
    )

  ;; chargement des touches au démarrage
  ;; (touches-controle-au-bon-endroit)

  (defun ancien-raccourcis-de-base ()
    ""
    (interactive)
    (org-babel-load-file (expand-file-name "/home/utilisateur/.dotfiles/.emacs.d/lisp/LayerXahFlyKey/LayerXahFlyKey.org"))
    )


#+end_src

** Test si le clavier est connecté

[[https://stackoverflow.com/questions/29146545/identifying-which-keyboard-has-a-keystroke-originated-from-from-within-emacs][lien du stackoverflow]]

#+begin_src emacs-lisp

  (defun usb-device-connected-p (device) 
    (< 0 (length (cl-remove-if-not (lambda (x) (cl-search device x)) 
                                   (split-string (shell-command-to-string "lsusb") "\n")))))

#+end_src

** Activation 
:LOGBOOK:
- State "TODO"       from              [2022-10-01 Sat 15:49]
:END:

#+begin_src emacs-lisp

    (setq my-keyboard-p (usb-device-connected-p "ErgoDash"))

    (when (and (not termux-p) (not my-keyboard-p))
      (touches-controle-au-bon-endroit)
      )



    ;; (if (usb-device-connected-p "Microsoft Corp. Natural Ergonomic Keyboard")
    ;;     (progn (global-set-key (kbd "<XF86Forward>") 'next-buffer)
    ;;            (global-set-key (kbd "<XF86Back>") 'previous-buffer)
    ;;            (global-set-key (kbd "<XF86Favorites>") 'buffer-menu)
    ;;            (global-set-key (kbd "<XF86HomePage>") 'buffer-menu))
    ;; )

    ;; (setq device "Intel Corp.")

#+end_src
* Hydra
* Chargement de mes abbréviation 

#+begin_src emacs-lisp
  (load "~/.emacs.d/config/lisp/my-abbrev.el") 
#+end_src
* Compter le nombre de chaque commande faite (bien pour optimiser les raccourcis)

keyfreq-show pour voir le nombre de commandes

#+begin_src emacs-lisp
  (use-package keyfreq
    :config
    ;;   Pour exclure des commandes
    (setq keyfreq-excluded-commands
          '(
            mouse-drag-region
            lsp-ui-doc--handle-mouse-movement
            mouse-set-point
            mwheel-scroll
            ))
    (setq keyfreq-buffer "*keyfreq-buffer*")
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))

#+end_src

* Commandes xah améliorer pour org-mode

#+begin_src emacs-lisp

  (defun org-folded-p ()
    "Returns non-nil if point is on a folded item."
    (interactive)
    (org-invisible-p (point-at-eol)))

#+end_src

** Xah beginning line or block

#+begin_src emacs-lisp

  (defun xah-beginning-of-line-or-block ()
    "Move cursor to beginning of line or previous block.

      • When called first time, move cursor to beginning of char in current line. (if already, move to beginning of line.)
      • When called again, move cursor backward by jumping over any sequence of whitespaces containing 2 blank lines.
      • if `visual-line-mode' is on, beginning of line means visual line.

      URL `http://xahlee.info/emacs/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
      Version: 2018-06-04 2021-03-16 2022-03-30 2022-07-03 2022-07-06"
    (interactive)
    (let (($p (point)))
      (if (or (equal (point) (line-beginning-position))
              (eq last-command this-command))
          (when
              (re-search-backward "\n[\t\n ]*\n+" nil 1)
            (skip-chars-backward "\n\t ")
            (if (org-invisible-p)
                ;; élément précédent invisible
                ;; pour tous les élément, revenir au début de la ligne, et caractère précédent
                (progn
                  (org-beginning-of-line)
                  ;; des fois, on arrive dans le titre. Donc on revient bien au début du titre avec cette commande
                  (beginning-of-line)
                  ;; pour être à la bonne position
                  (backward-char)
                  )
              ;; sinon cas classique
              (forward-char)))
        (if visual-line-mode
            (beginning-of-visual-line)
          (if (eq major-mode 'eshell-mode)
              (progn
                (declare-function eshell-bol "esh-mode.el" ())
                (eshell-bol))
            (back-to-indentation)
            (when (eq $p (point))
              (beginning-of-line)))))))

#+end_src

** Xah end of line or block

#+begin_src emacs-lisp

  (defun xah-end-of-line-or-block ()
    "Move cursor to end of line or next block.

              • When called first time, move cursor to end of line.
              • When called again, move cursor forward by jumping over any sequence of whitespaces containing 2 blank lines.
              • if `visual-line-mode' is on, end of line means visual line.

              URL `http://xahlee.info/emacs/emacs/emacs_keybinding_design_beginning-of-line-or-block.html'
              Version: 2018-06-04 2021-03-16 2022-03-05"
    (interactive)
    (if (or (equal (point) (line-end-position))
            (eq last-command this-command))
        (progn
          (re-search-forward "\n[\t\n ]*\n+" nil 1)
          ;; mince, on est passé sur un caractère invisible
          (when (org-invisible-p)
            (cond 
             ;; cas où l'on vient de passer un titre plié
             ((save-excursion
                (backward-char)
                ;; obligé de tester comme cela, org-at-heading-p marche seulement sur la ligne. De plus, permet aussi de skip si ya un drawer ou property-drawer
                (if (or (equal 'headline (car (org-element-at-point))) 
                        (equal 'drawer (car (org-element-at-point)))
                        (equal 'property-drawer (car (org-element-at-point)))
                        )
                    t nil))
              (outline-next-visible-heading 1)
              ;; ne marche pas pour le dernier heading
              ;; (org-next-visible-heading)
              )
             ;; cas des autres éléments pliables : ce sont juste des éléments en une partie, donc on va à la fin de cet élément
             (t (goto-char (org-element-property :end (org-element-at-point)))))))
      (if visual-line-mode
          (end-of-visual-line)
        (end-of-line))))

#+end_src

** Séléction paragraphe

xah-select-block avec lorsque la marque est avant, on sélectionne le paragraphe d'avant

#+begin_src emacs-lisp

  (defun xah-select-block ()
    "Select the current/next block plus 1 blankline.
          If region is active, extend selection downward by block.

          URL `http://xahlee.info/emacs/emacs/modernization_mark-word.html'
          Version: 2019-12-26 2021-04-04 2021-08-13"
    (interactive)
    (if (region-active-p)
        ;; (re-search-forward "\n[ \t]*\n[ \t]*\n*" nil 1)
        (xah-end-of-line-or-block)
      (progn
        (skip-chars-forward " \n\t")
        (when (re-search-backward "\n[ \t]*\n" nil 1)
          (goto-char (match-end 0)))
        (push-mark (point) t t)
        ;; (re-search-forward "\n[ \t]*\n" nil 1)
        (xah-end-of-line-or-block) ;; première fois pour aller à la fin de la ligne
        (xah-end-of-line-or-block) ;; deuxième fois fin du block
        )))

#+end_src

#+RESULTS:
: xah-select-block



** TODO xah-copy-line-or-region
:LOGBOOK:
- State "TODO"       from              [2023-04-09 Sun 11:05]
:END:

;; editing commands

#+begin_src emacs-lisp

  (defun xah-copy-line-or-region ()
    "Copy current line or selection.
                  When called repeatedly, append copy subsequent lines.
                  When `universal-argument' is called first, copy whole buffer (respects `narrow-to-region').

                  URL `http://xahlee.info/emacs/emacs/emacs_copy_cut_current_line.html'
                  Version: 2010-05-21 2022-10-03"
    (interactive)
    (let ((inhibit-field-text-motion nil))
      (if current-prefix-arg
          (progn
            (copy-region-as-kill (point-min) (point-max)))
        (if (region-active-p)
            (progn
              (copy-region-as-kill (region-beginning) (region-end)))
          (if (eq last-command this-command)
              (if (eobp)
                  (progn )
                (progn
                  (kill-append "\n" nil)
                  (kill-append
                   (buffer-substring-no-properties (line-beginning-position) (line-end-position))
                   nil)
                  (progn
                    (end-of-line)
                    (forward-char))))
            (if (eobp)
                (if (eq (char-before) 10 )
                    (progn )
                  (progn
                    (copy-region-as-kill (line-beginning-position) (line-end-position))
                    (end-of-line)))
              (progn
                ;;si on est sur un élément plié, on le copie
                (if (org-folded-p)
                    (progn
                      (copy-region-as-kill (save-excursion (org-beginning-of-line) (point)) (save-excursion (goto-char (org-element-property :end (org-element-at-point))) (point)))
                      (end-of-line)
                      (next-line)
                      (beginning-of-line)
                      )
                  (progn
                    (copy-region-as-kill (line-beginning-position) (line-end-position)))
                  ;; puis fin de ligne
                  (end-of-line)
                  (forward-char)
                  )
                )))))))

#+end_src

** xah-cut-line-or-region  

#+begin_src emacs-lisp

    (defun xah-cut-line-or-region ()
      "Cut current line or selection.
      When `universal-argument' is called first, cut whole buffer (respects `narrow-to-region').

      URL `http://xahlee.info/emacs/emacs/emacs_copy_cut_current_line.html'
      Version: 2010-05-21 2015-06-10"
      (interactive)
      (if current-prefix-arg
          (progn ; not using kill-region because we don't want to include previous kill
            (kill-new (buffer-string))
            (delete-region (point-min) (point-max)))
        (progn (if (region-active-p)
                   (kill-region (region-beginning) (region-end) t)
                 ;; si on est sur un élément plié
                 (if (org-folded-p)
                     (kill-region (save-excursion (org-beginning-of-line) (point)) (save-excursion (goto-char (org-element-property :end (org-element-at-point))) (point)))
                   (kill-region (line-beginning-position) (line-beginning-position 2)))))))



#+end_src

