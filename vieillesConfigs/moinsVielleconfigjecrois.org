;; pour mettre en "file" comme défaut dans org insert link, marche pas
(setq org-insert-link-command "file")
;; marche pour compile
(setq compile-command "CC=clang make -k")

+STARTUP: overview
+STARTUP: content
+STARTUP: showall
+STARTUP: showeverything

(setq mavar "~/.emacs.d/")
enlever 		 (define-key xah-fly-key-map (kbd "u") (kbd "RET"));;pareilnewlinecomme enter pour garder "newline" ?car j'aurais mon clavier pour enter facilement ! ça à l'air pratique, genre vraiment

* Raccourcis

*** xah-fly-key

 
	   #+begin_src emacs-lisp
	     (use-package xah-fly-keys	     
	       :config
	     
	       ;; (global-set-key (kbd "<menu>") 'xah-fly-command-mode-activate)
	     
	       ;; To disable both Control and Meta shortcut keys, add the following lines to you init.el before (require 'xah-fly-keys):
	       (setq xah-fly-use-control-key nil)
	       (setq xah-fly-use-meta-key nil)
	     
	     
	       ;; permet de mettru "u" comme enter
	       (defun my-xfk-addon-command ()
		 "Modify keys for xah fly key command mode keys To be added to `xah-fly-command-mode-activate-hook'"
		 (interactive)
		 (define-key xah-fly-key-map (kbd "u") (kbd "RET"));;pareilnewlinecomme enter
		 )
	       (add-hook 'xah-fly-command-mode-activate-hook 'my-xfk-addon-command)
	     
	       ;; choisir son clavier, important
	       (xah-fly-keys-set-layout "beopy")
	     
	       ;;M-x of your choice
	       ;;(setq xah-fly-M-x-command 'counsel-M-x)
	       ;;(setq xah-fly-M-x-command 'helm-M-x)
	     
	       ;; Les hook	     
	       ;; sauvegarde automatique avec command mode
	       (add-hook 'xah-fly-command-mode-activate-hook 'xah-fly-save-buffer-if-file)
	     
	       (xah-fly-keys);;activer xah au démarrage...
	       ;; (xah-fly-insert-mode-init) ;;avec le mode insertion
	       ) 
	     
	     
	     
	     
	     ;;Suites des hook
	     (defvar my/xfk-auto-insert-mode-fns '()
	       "List of functions to automatically call xah-fly-insert-mode-activate on.")
	     (setq my/xfk-auto-insert-mode-fns
		   '(org-meta-return
		     org-insert-heading-respect-content
		     org-insert-link
		     recentf-open-files
		     org-capture
	     
		     ;; More function names here
		     ))
	     (defun my/xfk-auto-insert-mode-activate ()
	       "Wires xah-fly-insert-mode-activate to all functions from my/xfk-auto-insert-mode-fns."
	       (dolist (element my/xfk-auto-insert-mode-fns)
		 (advice-add element :after #'xah-fly-insert-mode-activate)))
	     (my/xfk-auto-insert-mode-activate)
	     
	     
	     (defvar my/xfk-auto-command-mode-fns '()
	       "List of functions to automatically call xah-fly-command-mode-activate on.")
	     (setq my/xfk-auto-command-mode-fns
		   '(dashboard-jump-to-recent-files
		     dashboard-jump-to-projects
		     recentf-cancel-dialog
		     dashboard-jump-to-bookmarks
		     org-agenda-show-dashboard
		     dashboard-jump-to-if-dashboardweekagenda-agenda-for-the-coming-week-agenda-for-today
		     ;; More function names
		     ))
	     
	     (defun my/xfk-auto-command-mode-activate ()
	       "Wires xah-fly-command-mode-activate to all functions from my/xfk-auto-command-mode-fns."
	       (dolist (element my/xfk-auto-command-mode-fns)
		 (advice-add element :after #'xah-fly-command-mode-activate)))
	     (my/xfk-auto-command-mode-activate)
	     
	     
	     
	     
	   #+end_src





	   
*** LayerXahFlyKey, version straight !!!
    
#+begin_src emacs-lisp
  
  
  (use-package LayerXahFlyKey
    :after (xah-fly-keys)
    :straight '(LayerXahFlyKey :host github
			       :repo "Cletip/LayerXahFlyKey"
			       :branch "main"
			       :files ("*.el" "out")
			       )
  
    )
  
  
  ;;pour load mon pack sans le push à chaque fois, le met également à jour
  ;; (org-babel-load-file (expand-file-name "/home/msi/Documents/Code/LayerXahFlyKey/LayerXahFlyKey.org"))
  
  
  
  
  
  
#+end_src








* Clavier pour changer (test, à garder)
	   
** Pour changer mon clavier, à mettre ici ([[/home/msi/.emacs.d/straight/build/xah-fly-keys/xah-fly-keys.el][ici]])


#+begin_src emacs-lisp 
  
  ;; (makunbound 'xah--dvorak-to-beopy-kmap)
  
  (defvar xah--dvorak-to-beopy-kmap
  '(("." . "o")
    ("," . "é")
    ("'" . "b")
    (";" . "à")
    ("/" . "k")
    ("[" . "=")
    ("]" . "%")
    ("=" . "z")
    ("-" . "m")
    ("b" . "'")
    ("c" . "d")
    ("d" . "c")
    ("f" . "^"); NOTE: this is a dead key
    ("g" . "v")
    ("h" . "t")
    ("i" . ",")
    ("j" . "x")
    ("k" . ".")
    ("l" . "j")
    ("m" . "g")
    ("n" . "r")
    ("o" . "u")
    ("q" . "w")
    ("r" . "l")
    ("s" . "n")
    ("t" . "s")
    ("u" . "i")
    ("v" . "q")
    ("w" . "h")
    ("x" . "è")
    ("z" . "f")
    ("1" . "\"")
    ("2" . "«")
    ("3" . "»")
    ("4" . "(")
    ("5" . ")")
    ("6" . "@")
    ("7" . "+")
    ("8" . "-")
    ("9" . "/")
    ("0" . "*")
    ("\\" . "ç")
    ("`" . "$")))
  
  
#+end_src


** Normal


(defvar xah--dvorak-to-beopy-kmap
  '(("." . "o")
    ("," . "é")
    ("'" . "b")
    (";" . "à")
    ("/" . "k")
    ("[" . "=")
    ("]" . "%")
    ("=" . "z")
    ("-" . "m")
    ("b" . "'")
    ("c" . "d")
    ("d" . "c")
    ("f" . "^"); NOTE: this is a dead key
    ("g" . "v")
    ("h" . "t")
    ("i" . ",")
    ("j" . "x")
    ("k" . ".")
    ("l" . "j")
    ("m" . "g")
    ("n" . "r")
    ("o" . "u")
    ("q" . "è")
    ("r" . "l")
    ("s" . "n")
    ("t" . "s")
    ("u" . "i")
    ("v" . "h")
    ("w" . "q")
    ("x" . "w")
    ("z" . "f")
    ("1" . "\"")
    ("2" . "«")
    ("3" . "»")
    ("4" . "(")
    ("5" . ")")
    ("6" . "@")
    ("7" . "+")
    ("8" . "-")
    ("9" . "/")
    ("0" . "*")
    ("\\" . "ç")
    ("`" . "$")))


    
* Optimisation de base


** Opti de base
*** Mets les fichiers supprimer à la poubelle


*** naviguer avec les fenêtres



#+begin_src emacs-lisp
  
    (winner-mode 1) ;;naviguer avec les fenêtres
  
#+end_src





*** which-key

#+begin_src emacs-lisp

  (use-package which-key
    ;; :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.01)
    ;; pour sur le côté, mais si marche pas en bas
    (which-key-setup-side-window-right-bottom)

    ) 


#+end_src

   
*** popup kill ring (pour le press papier)


#+begin_src emacs-lisp 
  
  (use-package popup-kill-ring
    :diminish
    :config
    
    (with-eval-after-load 'company
      
      ;; touches perso, 
      (define-key popup-kill-ring-keymap (kbd "C-n") nil)
      (define-key popup-kill-ring-keymap (kbd "C-p") nil)
      (define-key popup-kill-ring-keymap (kbd "s") #'popup-kill-ring-next)
      (define-key popup-kill-ring-keymap (kbd "d") #'popup-kill-ring-previous)
      (define-key popup-kill-ring-keymap (kbd "u") 'popup-kill-ring-select)
      (define-key popup-kill-ring-keymap (kbd "SPC") #'company-abort)
      )
    (define-key popup-menu-keymap (kbd "s") #'popup-kill-ring-next)
    
    
    
    )  
  
#+end_src


*** move text (pour déplacer les lignes / para comme org-mode)

 #+begin_src emacs-lisp 
   
   (use-package move-text
     :defer 0.5
     :config
     (move-text-default-bindings)) 
   
 #+end_src

*** Ace windows (choisi la fenêtre où l'on veut aller)

#+begin_src emacs-lisp 
  
  (use-package ace-window
    :custom aw-keys '(?t ?i ?s ?e ?r ?u ?n ?a ?,) )
  
  
  
#+end_src

*** Avy (go to char) + go to char avec lettres perso !

[[https://github.com/abo-abo/avy/wiki/defcustom][site ici]]

#+begin_src emacs-lisp
  
      (use-package avy
	;;\ pour l'espace
	:custom
	;;personnalition des touches
	(avy-keys '(?a ?u ?e ?i ?t ?s ?r ?n ?\ ))
	(avy-background t)
	;;nouvelle touches pour escape avy go timer
	(avy-escape-chars '(?\e ?\M-g))
	:config
  

  
	(setq avy-timeout-seconds 0.15)
  
  ;;pour jump dans l'agenda
    (defun avy--org-agenda-cands ()
    (let (candidates point)
      (save-excursion
	(save-restriction
	  (narrow-to-region (window-start) (window-end (selected-window) t))
	  (setq point (goto-char (point-min)))
	  (while (setq point (text-property-not-all point (window-end) 'org-marker nil))
	    (push (cons point (selected-window)) candidates)
	    (setq point (text-property-any point (window-end) 'org-marker nil)))))
      (nreverse candidates)))
  
  (defun avy-org-agenda ()
    "Goto a visible item in an `org-mode-agenda' buffer."
    (interactive)
    (avy-action-goto (avy-with avy-org-agenda
		       (avy-process (avy--org-agenda-cands)))))
  
	)
  
  
  
  
    ;;personnaliser chaque commande :
    ;; (setq avy-keys-alist
	  ;; `((avy-goto-char . ,(number-sequence ?a ?f))
	    ;; (avy-goto-word-1 . (?f ?g ?h ?j))))
  
  
#+end_src

*** Rends les processus asynchrone (accélère emacs)




  
#+begin_src emacs-lisp 
  
  ;; (use-package async
  ;;   :init (dired-async-mode 1)
  ;;   :diminish)
  
#+end_src
    


*** Copies de sauvegarde dans fichier .emacs.d/backup, bon backup tous les x, fichiers à ne pas mettre dans les backups
     
 #+begin_src emacs-lisp 
    ;; choice of the backup directory
   (defconst my-backup-dir
     (expand-file-name (concat user-emacs-directory "backups")))
   
   (setq make-backup-files t               ; backup of a file the first time it is saved.
	backup-by-copying t               ; don't clobber symlinks
	version-control t                 ; version numbers for backup files
	delete-old-versions t             ; delete excess backup files silently
	delete-by-moving-to-trash t
	kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9               ; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t               ; auto-save every buffer that visits a file
	auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200            ; number of keystrokes between auto-saves (default: 300)
	)
   
   
   ;;fichier à ne pas copier dans les backups
   (setq auto-mode-alist
      (append
       (list
	'("\\.\\(vcf\\|gpg\\)$" . sensitive-minor-mode)
	)
       auto-mode-alist))
   
   ;; if no backup directory exists, then create it:
   (if (not (file-exists-p my-backup-dir))
       (mkdir my-backup-dir t))
 #+end_src
*** Autorevert mode (rafraichit automatiquement les buffers)

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src


*** Permet de r y ou n au lieu de yes ou no 
#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)
  
#+end_src


*** Échap en une fois
#+begin_src emacs-lisp

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  
#+end_src


*** Réécriture/remplacement lors de texte sélectionné
#+begin_src emacs-lisp

  (delete-selection-mode t)
  
#+end_src

*** Sauvegarde la place du curseur(marche sans no-litteralling)

#+begin_src emacs-lisp
    
    ;; (save-place-mode 1)
    
    ;; (use-package saveplace
    ;; :init (save-place-mode))
    
    
#+end_src

  



** clean .emacs.d

    #+begin_src emacs-lisp
      
      (use-package no-littering
	;; :after savehist 
	:config
	(setq auto-save-file-name-transforms
	      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
	)
      
      
      
      
      ;; (require 'recentf)
      (use-package recentf
	;;:after org
	:config
      
      
	;; pour que recentf marche normalement avec no littering		  
      
	(add-to-list 'recentf-exclude no-littering-var-directory)
	(add-to-list 'recentf-exclude no-littering-etc-directory)
      
      
	;;pour éviter les fichier org-roam dans recentf, mais ne conservera jamais les fichiers .org…
	;; (add-to-list 'recentf-exclude "\\.org\\'")
      
	;; résolution avec ceci :
      
	;; (setq org-roam-directory "/home/msi/Notes/Roam")

      
      
      
	;; (add-to-list 'recentf-exclude (expand-file-name org-roam-directory))
      
	(add-to-list 'recentf-exclude (expand-file-name "/home/msi/Notes/Roam/"))
      
      
      
	;; 	pareil, mais avec le server (écrit dans le fichier toutes les x secondes, ici 200)	;; (run-at-time (current-time) 200 'recentf-save-list)
      
      
      
	)
      
      
      
      
          #+end_src
** Meilleurs lecture de pdf


   
 
   #+begin_src emacs-lisp
     
     (use-package let-alist)
     (use-package tablist)
	   (use-package pdf-tools
     
;;	     :pin manual ;; manually update
	     
	     :config
	     ;; initialise
	     (pdf-tools-install)
	     ;; open pdfs scaled to fit page
	     (setq-default pdf-view-display-size 'fit-page)
	     ;; automatically annotate highlights
	     (setq pdf-annot-activate-created-annotations t)
	     ;; use normal isearch
	     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
	     ;;mode nuit de base
	     (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
	     )
     
   #+end_src

   
** Pour travailleur de l'ombre ?Diminish
     #+begin_src emacs-lisp
 (use-package diminish)
     #+end_src
     

** Pour mapper les touches avec general-define-key (dans dap-mode notamment)
     #+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup t)

  (general-create-definer dw/leader-key-def
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC") 

  (general-create-definer dw/ctrl-c-keys
    :prefix "C-c"))
     #+end_src
     

     
** Esthétique

*** Police

#+begin_src emacs-lisp 
  ;;police de base    
      (set-face-attribute 'default nil
			       :font "Fira Mono"
			       :weight 'light
			       ;; :height 110
			       )
  
  
  
      (defun Policedebase ()
	(interactive)
	  (set-face-attribute 'default nil
			       :font "Fira Mono"
			       :weight 'light
			       :height 110
			       )
	)
  
  
      (defun Policepourcoder ()
	(interactive)
  
	  (set-face-attribute 'default nil
			       :font "JetBrains Mono"
			       :weight 'light
			       ;; :height 150
			       )
	)
  
  
  ;;police pour coder
      (add-hook 'lsp-mode-hook 'Policepourcoder)  
  
  
  
  
#+end_src


*** Texte, curseur. 
**** Longueur de ligne à 80, visual-line pour textes, auto-fill commentaire prog
#+begin_src emacs-lisp

  (setq-default fill-column 80)

  (add-hook 'text-mode-hook 'visual-line-mode)
  (add-hook 'org-mode-hook 'visual-line-mode)

  (defun my/prog-auto-fill-mode ()
    "Turn on auto-fill only for comments."
    (setq-local comment-auto-fill-only-comments t)
    (auto-fill-mode 1))
  (add-hook 'prog-mode-hook 'my/prog-auto-fill-mode)

#+end_src

**** Curseur
***** Scroll

#+begin_src emacs-lisp
   (use-package beacon
   :diminish
   :config
   (setq beacon-blink-delay 0.1)
   (setq beacon-blink-duration 0.6)
   (setq beacon-size 40)
   (setq beacon-color "#ffa38f")
     (beacon-mode 1)
   )

 #+end_src
***** Surlignage ligne
#+begin_src emacs-lisp
 (global-hl-line-mode t)
 (set-face-background hl-line-face "#311")
#+end_src
**** Couleur zone sélectionnée, mark set
Faire M-x customize-face RET region et choisir
*** Détails (scrollbar, message début)(remplacer par nyancat)()
 #+begin_src emacs-lisp
   ;; Thanks, but no thanks
(setq inhibit-startup-message t)


  (scroll-bar-mode -1)        ; Disable visible scrollbar
  
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)      ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

;; Set up the visible bell
(setq visible-bell t)
 #+end_src
 
*** Démarrer avec les fichiers récents, titre etc

#+begin_src emacs-lisp  
  (use-package dashboard
    :config
    ;;centrer (marche pas?)
    (setq dashboard-center-content t)
    ;;item
    (setq dashboard-items '((recents  . 10)			    
			    (agenda . 5)
			    (bookmarks . 5)
			    (projects . 5)
			    (registers . 5)
			    )
	  )
    ;;agenda de la semaine 
    (setq dashboard-week-agenda t)
    ;;emacsclient avec dashboard
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
    (dashboard-setup-startup-hook)
    )
#+end_src






*** Thèmes (faire M-x customize-themes pour choisir)
#+begin_src emacs-lisp
  
		     (use-package spacemacs-theme
		       :no-require t
		       :init
		       ;; (load-theme 'spacemacs-dark t)
		       )
  
	      (use-package doom-themes
		:config
		;; (load-theme 'doom-one t)
		;; (load-theme 'doom-one-light t)
		;; (load-theme 'doom-vibrant t)
		;; (load-theme 'doom-acario-dark t)
		;; (load-theme 'doom-acario-light t)
		;; (load-theme 'doom-city-lights t)
		;; (load-theme 'doom-challenger-deep t)
		;; (load-theme 'doom-dark+ t)
		;; (load-theme 'doom-dracula t)
		;;; (load-theme 'doom-fairy-floss t)
		;;; (load-theme 'doom-gruvbox t)
		;; (load-theme 'doom-horizon t)
		;; (load-theme 'doom-Iosvkem t)
		;; (load-theme 'doom-laserwave t)
		;; (load-theme 'doom-material t)
		;; (load-theme 'doom-manegarm t)
		;; (load-theme 'doom-molokai t)
		 (load-theme 'doom-moonlight t)
		;; (load-theme 'doom-nord t)
		;; (load-theme 'doom-nord-light t)
		;; (load-theme 'doom-nova t)
		;; (load-theme 'doom-oceanic-next t)
		;;; (load-theme 'doom-opera t)
		;; (load-theme 'doom-opera-light t)
		;; (load-theme 'doom-outrun-electric t)
		;; (load-theme 'doom-palenight t)
		;;; (load-theme 'doom-peacock t)
		;; (load-theme 'doom-snazzy t)
		;;; (load-theme 'doom-solarized-dark t)
		;; (load-theme 'doom-solarized-light t)
		;; (load-theme 'doom-sourcerer t)
		;; (load-theme 'doom-spacegrey t)
		;; (load-theme 'doom-tomorrow-night t)
		;; (load-theme 'doom-tomorrow-day t)
		;;; (load-theme 'doom-wilmersdorf t)
		)
  

  (use-package org-beautify-theme
    :if (display-graphic-p)
    :config
    (load-theme 'org-beautify t)
    (set-face-attribute 'org-document-title nil :height 1.5)
    (set-face-font 'org-level-1 "Sans Serif")
    (set-face-font 'org-level-2 "Sans Serif"))
  
#+end_src



*** Transparence/fond d'écran (C-c t)

[[https://www.emacswiki.org/emacs/TransparentEmacs][Go pour images]]


#+BEGIN_SRC emacs-lisp 
  
  (setq transparency_level 0)
  (defun my:change_transparency ()
    "Toggles transparency of Emacs between 3 settings (none, mild, moderate)."
    (interactive)
    (if (equal transparency_level 0)
	(progn (set-frame-parameter (selected-frame) 'alpha '(75 . 85))
	   (setq transparency_level 1))
      (if (equal transparency_level 1)
      (progn (set-frame-parameter (selected-frame) 'alpha '(60 . 85))
	     (setq transparency_level 2))
	(if (equal transparency_level 2)
	(progn (set-frame-parameter (selected-frame) 'alpha '(100 . 85))
	   (setq transparency_level 0)))
	)))
  (define-key global-map (kbd "C-c t") 'my:change_transparency)
  
  
  
  (defun toggle-transparency ()
  (interactive)
  (let ((alpha (frame-parameter nil 'alpha)))
    (if (eq
     (if (numberp alpha)
	 alpha
       (cdr alpha)) ; may also be nil
     100)
    (set-frame-parameter nil 'alpha '(60 . 50))
      (set-frame-parameter nil 'alpha '(100 . 100)))))
  
  (toggle-transparency)
#+END_SRC

  
*** Moderne Barre mode line !

**** Moteur 
     #+begin_src emacs-lisp
       
       (use-package doom-modeline
	 :hook (after-init . doom-modeline-mode)
	 :custom    
	 (doom-modeline-height 25)
	 (doom-modeline-bar-width 1)
	 (doom-modeline-icon t)
	 (doom-modeline-major-mode-icon t)
	 (doom-modeline-major-mode-color-icon t)
	 (doom-modeline-buffer-file-name-style 'truncate-upto-project)
	 (doom-modeline-buffer-state-icon t)
	 (doom-modeline-buffer-modification-icon t)
	 (doom-modeline-minor-modes nil)
	 (doom-modeline-enable-word-count t)
	 (doom-modeline-buffer-encoding nil)
	 (doom-modeline-indent-info nil)
	 (doom-modeline-checker-simple-format t)
	 (doom-modeline-vcs-max-length 20)
	 (doom-modeline-env-version t)
	 (doom-modeline-irc-stylize 'identity)
	 (doom-modeline-github-timer nil)
	 (doom-modeline-gnus-timer nil)
	 )
       
     #+end_src


     
**** TODO Désactiver la mode line


#+begin_src emacs-lisp 
  
  
  
  (defun ask-name-and-age (x y)
  "Ask name and age"
  (interactive "sEnter you name:
nEnter your age: ")
  (message "Name is: %s, Age is: %d" x y))
  
      (defun toggle-mode-line ()
	(interactive)
	(if (eval 'mode-line-format)
  (setq mode-line-format t)
  (message "Salut")
	  )
	(setq mode-line-format nil)
	(message "Test")
	)
  
  
	;; (setq mode-line-format t)
  
  
  
  
#+end_src

     
     
*** Mise en valeur du buffer actif (diminue la luminosité)
#+begin_src emacs-lisp

  (use-package dimmer
    :custom
    (dimmer-fraction 0.3)
    (dimmer-exclusion-regexp-list
     '(".*Minibuf.*"
       ".*which-key.*"
       ".*LV.*"))
    :config
    (dimmer-mode 1))
  
#+end_src



*** C-x C-c Restart emacs (map sur spc spc b)

#+BEGIN_SRC emacs-lisp 
  ;; Provides only the command “restart-emacs”.
  (use-package restart-emacs
    ;; If I ever close Emacs, it's likely because I want to restart it.
    ;; :bind ("C-x C-c" . restart-emacs)
    ;; Let's define an alias so there's no need to remember the order.
    :config (defalias 'emacs-restart #'restart-emacs))
  
#+END_SRC



** BetterDired (icon, vidéo mec etc) [[https://github.com/Fuco1/dired-hacks][ici]]

*** Optimisation de base

#+begin_src emacs-lisp
  
  
  ;; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)

  
  (setq dired-auto-revert-buffer t) ;; Refreshes the dired buffer upon revisiting
  (setq dired-dwim-target t) ;; If two dired buffers are open, save in the other when trying to copy
  (setq dired-hide-details-hide-symlink-targets nil) ;; Don't hide symlink targets
  (setq dired-listing-switches "-alh") ;; Have dired view all folders, in lengty format, with data amounts in human readable format
  (setq dired-ls-F-marks-symlinks nil) ;; Informs dired about how 'ls -lF' marks symbolic links, see help page for more details
  (setq dired-recursive-copies 'always) ;; Always copy recursively without asking
  (setq dired-recursive-deletes 'always) ; demande plus pour supprimer récursivement
  (setq dired-dwim-target t) ; qd t-on copie, 
  
  
#+end_src


*** Trier avec S dans dired

#+begin_src emacs-lisp
  
  (use-package dired-quick-sort
    :config
    (dired-quick-sort-setup))
  
#+end_src

*** Pour This package adds more customizable highlighting for files in dired listings. The group dired-faces provides only nine faces and isn't very fine-grained.
#+begin_src emacs-lisp
  
  
  (use-package dired-rainbow
    :defer 2
    :config
    (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
    (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
    (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
    (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
    (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
    (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
    (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
    (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
    (dired-rainbow-define log "#c17d11" ("log"))
    (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
    (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
    (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
    (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
    (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
    (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
    (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
    (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
    (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
    (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
    (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))
  
#+end_src


*** Pour montrer 1 fichier dans un dossier

#+begin_src emacs-lisp
  
  
  (use-package dired-collapse
    :defer t)
  
    (add-hook 'dired-load-hook
            (lambda ()
              (interactive)
              (dired-collapse)))
  
#+end_src


*** Les icônes + cacher les détails

#+begin_src emacs-lisp

  (use-package all-the-icons-dired)

  (setq dired-omit-files
	(rx (or (seq bol (? ".") "#")
		(seq bol "." eol)
		;; (seq bol ".." eol)
		)))

  (add-hook 'dired-mode-hook
	    (lambda ()
	      (interactive)
	      (dired-omit-mode 1)
	      (all-the-icons-dired-mode 1)
	      (dired-sort-toggle-or-edit)
	      (dired-hide-details-mode)
	      (hl-line-mode 1)
	      ))

#+end_src


** Better termmode

*** Bash
#+begin_src emacs-lisp
  
  (use-package term
  :config
  (setq explicit-shell-file-name "bash") ;; Change this to zsh, etc
  ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args
  
  ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
  
  
  
#+end_src


*** Couleurs

#+begin_src emacs-lisp
  
  (use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
  
#+end_src


** Premier emacs : serveur


Ancien :

Mettre sur le pc au démarrage : 
emacs --daemon
puis créer un raccourcis (moi f1) pour lancer un client emacs avec
emacsclient27 -c

Nouveau : mettre

    (server-start)

    à un endroit de la config 


** Compter le nombre de commande

keyfreq-show pour voir le nombre de commandes

#+begin_src emacs-lisp
  
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
  
#+end_src

Pour exclure des commandes 


(setq keyfreq-excluded-commands
      '(self-insert-command
        forward-char
        backward-char
        previous-line
        next-line))


** Super mini buffer !

*** Vertico consult
 
      

#+begin_src emacs-lisp
  
      (use-package vertico
	:bind (:map vertico-map
		    ("C-j" . vertico-next)
		    ("C-k" . vertico-previous)
		    ("C-f" . vertico-exit)
		    :map minibuffer-local-map
		    ("M-h" . dw/minibuffer-backward-kill))
	:custom
	(vertico-cycle t)
	:custom-face
	(vertico-current ((t (:background "#3a3f5a"))))
	:init
	(vertico-mode))
  
  
  
      (defun dw/get-project-root ()
	(when (fboundp 'projectile-project-root)
	  (projectile-project-root)))
  
      (use-package consult
	:bind (("C-s" . consult-line)
	       ("C-M-l" . consult-imenu)
	       ("C-M-j" . persp-switch-to-buffer*)
	       :map minibuffer-local-map
	       ("C-r" . consult-history))
	:custom
	(consult-project-root-function #'dw/get-project-root)
	(completion-in-region-function #'consult-completion-in-region)
	)
  
      ;; Complétation par candidats      
      ;; Use the `orderless' completion style.
      ;; Enable `partial-completion' for files to allow path expansion.
      ;; You may prefer to use `initials' instead of `partial-completion'.
      (use-package orderless
	:init
	(setq completion-styles '(orderless)
	      completion-category-defaults nil
	      completion-category-overrides '((file (styles partial-completion)))))
  
  
      ;; Persist history over Emacs restarts. Vertico sorts by history position.
   (use-package savehist
   :init
   (setq savehist-file "~/.emacs.d/var/savehist.el")
   :config
   (setq history-length 25)
   (setq savehist-additional-variables '(kill-ring search-ring))
   (savehist-mode t))  
  
  
      ;; A few more useful configurations...
      (use-package emacs
	:init
	;; Add prompt indicator to `completing-read-multiple'.
	;; Alternatively try `consult-completing-read-multiple'.
	(defun crm-indicator (args)
	  (cons (concat "[CRM] " (car args)) (cdr args)))
	(advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  
	;; Do not allow the cursor in the minibuffer prompt
	(setq minibuffer-prompt-properties
	      '(read-only t cursor-intangible t face minibuffer-prompt))
	(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  
	;; Enable recursive minibuffers
	(setq enable-recursive-minibuffers t))
  
  
  
  
  
#+end_src

    
  

*** Information sur le côté du mini buffer

#+begin_src emacs-lisp
  
      ;; info sur le côté du mini buffer
    (use-package marginalia
      :after vertico
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (marginalia-mode))
  
#+end_src

*** Helm + swiper + ivy


**** Helm
  
    (use-package helm-swoop)
    (use-package helm-flx)
    (use-package smex)
    (use-package helm)
  
    (require 'helm-config)
    (helm-mode 1)
    (helm-flx-mode 1)
  
  
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  
    ;;intégration fly
   
  ;; (with-eval-after-load 'helm
      ;; (define-key helm-map [remap next-line] #'helm-next-line)
      ;; (define-key helm-map [remap previous-line] #'helm-previous-line))
  
  
  
    (define-key helm-read-file-map (kbd "<backsqpace>") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-read-file-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-find-files-map (kbd "<backspace>") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-find-files-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
  
  
  
  
    ;; The following snippet will configure helm to always pop up at the bottom.
  
    (setq helm-split-window-in-side-p t)
  
    (add-to-list 'display-buffer-alist
		 '("\\`\\*helm.*\\*\\'"
		   (display-buffer-in-side-window)
		   (inhibit-same-window . t)
		   (window-height . 0.4)))
  
    (setq helm-swoop-split-with-multiple-windows nil
	  helm-swoop-split-direction 'split-window-vertically
	  helm-swoop-split-window-function 'helm-default-display-buffer)
  
    ;; And finally this will hide the minibuffer while helm is active
  
    (defun helm-hide-minibuffer-maybe ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
	(let ((ov (make-overlay (point-min) (point-max) nil nil t)))
	  (overlay-put ov 'window (selected-window))
	  (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
				  `(:background ,bg-color :foreground ,bg-color)))
	  (setq-local cursor-type nil))))
  
    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
  
  
  
    ;; The following snippet will reconfigure the behaviour of keys in helm file navigation buffers.
  
  
    ;; Backspace goes to the upper folder if you are not inside a filename, and Return will select a file or navigate into the directory if it is one.
  
  
  
    (defun dwim-helm-find-files-up-one-level-maybe ()
      (interactive)
      (if (looking-back "/" 1)
	  (call-interactively 'helm-find-files-up-one-level)
	(delete-backward-char 1)))
  
    (define-key helm-read-file-map (kbd "<backsqpace>") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-read-file-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-find-files-map (kbd "<backspace>") 'dwim-helm-find-files-up-one-level-maybe)
    (define-key helm-find-files-map (kbd "DEL") 'dwim-helm-find-files-up-one-level-maybe)
  
  
  
  
    (defun dwim-helm-find-files-navigate-forward (orig-fun &rest args)
      "Adjust how helm-execute-persistent actions behaves, depending on context"
      (if (file-directory-p (helm-get-selection))
	  (apply orig-fun args)
	(helm-maybe-exit-minibuffer)))
  
  
    (define-key helm-map (kbd "<return>") 'helm-maybe-exit-minibuffer)
    (define-key helm-map (kbd "RET") 'helm-maybe-exit-minibuffer)
    (define-key helm-find-files-map (kbd "<return>") 'helm-execute-persistent-action)
    (define-key helm-read-file-map (kbd "<return>") 'helm-execute-persistent-action)
    (define-key helm-find-files-map (kbd "RET") 'helm-execute-persistent-action)
    (define-key helm-read-file-map (kbd "RET") 'helm-execute-persistent-action)
  
    (advice-add 'helm-execute-persistent-action :around #'dwim-helm-find-files-navigate-forward)    
  
  
  
    ;; After putting the following snippet in your init you can use smex in conjunction with helm.
  
    (require 'smex)
    (smex-initialize)
  
    (defvar helm-smex-source--candidates nil)
    (defvar helm-smex-source--cache (make-hash-table :test #'eq))
  
    (defun helm-smex//score-no-cache (command)
      (or (cdr (car (cl-member (symbol-name command) smex-cache
			       :test #'string=)))
	  0))
  
    (defun helm-smex//score (command)
      (or (gethash command helm-smex-source--cache)
	  (puthash command (helm-smex//score-no-cache command)
		   helm-smex-source--cache)))
  
    (defun helm-smex//compare-candidates (command-name1 command-name2)
      (> (helm-smex//score (intern-soft command-name1))
	 (helm-smex//score (intern-soft command-name2))))
  
    (defclass helm-smex-source (helm-source-sync)
      ((init
	:initform (lambda ()
		    (setq helm-smex-source--candidates
			  (smex-convert-for-ido smex-cache))
		    (clrhash helm-smex-source--cache)))
       (candidates :initform 'helm-smex-source--candidates)
       (match :initform 'helm-fuzzy-match)
       (filtered-candidates-transformer
	:initform (lambda (candidates source)
		    (sort candidates #'helm-smex//compare-candidates)))
       (action
	:initform (lambda (command-name)
		    (unwind-protect
			(execute-extended-command current-prefix-arg
						  command-name)
		      (smex-rank (intern command-name)))))))
  
    (defun helm-smex/run ()
      (interactive)
      (helm :buffer "*helm-smex*"
	    :sources (helm-make-source "Smex" helm-smex-source)))
  
  



**** Helm pour org-roam



***** md.roam


#+begin_src emacs-lisp
  
  ;; (add-to-list 'load-path "~/Téléchargements/md-roam/") ;Modify with your own path
  
  ;; (require 'md-roam) ;this must be before org-roam
  
  ;; (setq md-roam-file-extension-single "md")
    ;set your markdown extension
    ;you can omit this if md, which is the default.
  ;; (setq org-roam-title-sources '((mdtitle title mdheadline headline) (mdalias alias)))
    ;you need this as of commit `5f24103`.
  
  ;; (setq org-roam-file-extensions '("org" "md"))
  
  ;; (setq org-roam-title-sources '((mdtitle title mdheadline headline) (mdalias alias)))
#+end_src







**** Dans un fichier (swiper)
 

	(use-package counsel
	   
	  )

	(use-package swiper
	   
	  :config
	  (progn
	    (ivy-mode 1)
	    (setq ivy-use-virtual-buffers t)
	    (global-set-key "\C-s" 'swiper)
	    (global-set-key (kbd "C-c C-r") 'ivy-resume)
	    (global-set-key (kbd "<f6>") 'ivy-resume)
	    (global-set-key (kbd "M-x") 'counsel-M-x)
	    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
	    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
	    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
	    (global-set-key (kbd "<f1> l") 'counsel-load-library)
	    (global-set-key (kbd "C-c g") 'counsel-git)
	    (global-set-key (kbd "C-c j") 'counsel-git-grep)
	    (global-set-key (kbd "C-c k") 'counsel-ag)
	    (global-set-key (kbd "C-x l") 'counsel-locate)
	    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
	    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
	    ))

	    



	    
* Org
  
** Esthétiques

*** Joli org-mode
**** Les petites bulles des menus
   #+begin_src emacs-lisp
     
     (use-package org-bullets
       :after org
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
     
     
     
   #+end_src
   
**** Les fin de titres
      #+begin_src emacs-lisp 
		(setq org-ellipsis "⬎")
	;; pour changer la couleur : M-x customize group RET org-faces puis C-s ellipsis 
      #+end_src


      
**** Emphasis réelles 

     #+begin_src emacs-lisp
       
       (setq org-hide-emphasis-markers t)                            
       (setq org-emphasis-alist   
	     (quote (
		     ("*" bold)
		     ("/" (:foreground "red" :background "black"))
		     ("_" underline)
		     ("=" (:foreground "yellow" :background "black"))
		     ("~" org-verbatim verbatim)
		     ("+"
		      (:strike-through t))
		     )))
       
     #+end_src


**** TODO Prettify, pour les jolie icones icônes, todo, begin sourc etc (fait arrêter le serveur)
:PROPERTIES:
:CREATED:  <2021-09-20 lun. 13:19>
:END:


#+begin_src emacs-lisp 
  
  ;;pour que pretty-icon fonctionne, à appeler en même temps que l'autre fonction
  
  
	(defun org-icons ()
	 "Beautify org mode keywords."
	 (interactive)
	 (setq prettify-symbols-alist '(
					;; ("TODO" . "")
					;; ("PEUT-ÊTRE" . "")
					;; ("EN-COURS" . "")
					;; ("ANNULÉ" . "")
					;; ("DONE" . "")
					;; ("[#A]" . "")
					;; ("[#B]" . "")
					;; ("[#C]" . "")
					("-" . "➤")
					;; ("[ ]" . "")
					;; ("[X]" . "")
					;; ("[-]" . "")
					("#+begin_src" . ?)
					("#+BEGIN_SRC" . ?)
					("#+end_src" . ?)
					("#+END_SRC" . ?)
					;; (":PROPERTIES:" . "")
					;; (":END:" . "―")
					("#+STARTUP:" . "")
					;; ("#+TITLE: " . "")
					("#+RESULTS:" . "")
					("#+NAME:" . "")
					(":ROAM_ALIASES:" . "")
					("#+FILETAGS:" . "")
					;; ("#+HTML_HEAD:" . "")
					("#+SUBTITLE:" . "")
					("#+AUTHOR:" . "")
					(":Effort:" . "")
					("SCHEDULED:" . "")
					("DEADLINE:" . "")
					))
	 (prettify-symbols-mode)
	 ;; (magic-icon-fix)
	 )  
  
  
  
  (add-hook 'org-mode-hook 'org-icons)
  
  
  
  (defun magic-icon-fix ()
      (interactive)
	(let ((fontset (face-attribute 'default :fontset)))
	      (set-fontset-font fontset '(?\xf000 . ?\xf2ff) "FontAwesome" nil 'append)))
  
  (defun org-icons+todoicons ()
	 "Beautify org mode keywords."
	 (interactive)
	 (setq prettify-symbols-alist '(
					("TODO" . "")
					("PEUT-ÊTRE" . "")
					("EN-COURS" . "")
					("ANNULÉ" . "")
					("DONE" . "")
					("[#A]" . "")
					("[#B]" . "")
					("[#C]" . "")
					("-" . "➤")
					("[ ]" . "")
					("[X]" . "")
					("[-]" . "")
					("#+begin_src" . ?)
					("#+BEGIN_SRC" . ?)
					("#+end_src" . ?)
					("#+END_SRC" . ?)
					(":PROPERTIES:" . "")
					(":END:" . "―")
					("#+STARTUP:" . "")
					("#+TITLE: " . "")
					("#+RESULTS:" . "")
					("#+NAME:" . "")
					(":ROAM_ALIASES:" . "")
					("#+FILETAGS:" . "")
					("#+HTML_HEAD:" . "")
					("#+SUBTITLE:" . "")
					("#+AUTHOR:" . "")
					(":Effort:" . "")
					("SCHEDULED:" . "")
					("DEADLINE:" . "")
					))
	 (prettify-symbols-mode)
	 (magic-icon-fix)
	 )  
  
  
  
#+end_src


*** TODO Pour mettres les jolie tags :

#+begin_src emacs-lisp 

(use-package org-pretty-tags
  :config
   (setq org-pretty-tags-surrogate-strings
	 (quote
	  (("@office" . "✍")
	   ("PROJEKT" . "💡")
	   ("SERVICE" . "✍")
	   ("Blog" . "✍")
	   ("music" . "♬")
	   )))
   (org-pretty-tags-global-mode))

#+end_src

*** Voir directement les images/taille/

#+begin_src emacs-lisp
(setq org-startup-with-inline-images t)
(setq org-image-actual-width 800)  
#+end_src

*** Voir latex prévisualisation 

#+BEGIN_SRC emacs-lisp 
  
  
      (use-package org-fragtog
	:hook (org-mode . org-fragtog-mode)
	)
  
      
  
  
#+END_SRC

*** Pour voir directement les liens, l' emphasis etc

#+begin_src emacs-lisp 

  (straight-use-package '(org-appear :type git :host github :repo "awth13/org-appear"))

  (add-hook 'org-mode-hook 'org-appear-mode)

  ;;affiche les liens entier avec t
  ;; (setq org-appear-autolinks t)
  
#+end_src



** Exports

*** Nouveaux exports

**** Pour twitter (why not)

      #+begin_src emacs-lisp
 (use-package ox-twbs
  )
      #+end_src

**** Html
#+begin_src emacs-lisp 
 (use-package htmlize)
#+end_src


  
**** Epub

#+begin_src emacs-lisp  
  (use-package ox-epub)
#+end_src

*** Esthétique
**** Pour latex
***** A garder au cas où
 ?
 (require 'ox-latex)
 (unless (boundp 'org-latex-classes)
   (setq org-latex-classes nil))
 (add-to-list 'org-latex-classes
              '("article"
		"\\documentclass{article}"
		("\\section{%s}" . "\\section*{%s}")))
 ?
***** Nouveaux styles :
****** org-plain-latex



    #+BEGIN_SRC emacs-lisp 



    (with-eval-after-load 'ox-latex
    (add-to-list 'org-latex-classes
		 '("org-plain-latex"
		   "\\documentclass{article}
               [NO-DEFAULT-PACKAGES]
               [PACKAGES]
               [EXTRA]"
		   ("\\section{%s}" . "\\section*{%s}")
		   ("\\subsection{%s}" . "\\subsection*{%s}")
		   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		   ("\\paragraph{%s}" . "\\paragraph*{%s}")
		   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    #+END_SRC

**** Esthétique de la page html
***** Titre de section nn numéroté (enlever, enlève table des matières latex), Faire liste après 3e niveau, pas d'auteur
#+begin_src emacs-lisp
;;(setq org-export-with-section-numbers nil)
(setq org-export-headline-levels 3)
(setq org-export-with-author nil)
#+end_src





** Raccourcis
*** C-c u et C-c a pour store-link et agenda
     #+begin_src emacs-lisp 
       (require 'org)
       ;; (define-key global-map "\C-cl" 'org-store-link)
       (define-key global-map "\C-ca" 'org-agenda)
       (setq org-log-done t)
     #+end_src
*** C-x x Pour barre sur le côté, org-sidebar
    #+begin_src emacs-lisp
      (use-package org-sidebar
	:bind
	("C-x x" . org-sidebar-tree-toggle)
	) 
    #+end_src



    *** Les nouveaux templates,  en mieux
    #+begin_src emacs-lisp
      (require 'org-tempo)
      
      (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
      (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
      (add-to-list 'org-structure-template-alist '("cd" . "src C"))
            (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
      (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
      (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
      (add-to-list 'org-structure-template-alist '("py" . "src python"))
      (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
      (add-to-list 'org-structure-template-alist '("json" . "src json"))
    #+end_src


    

** Optimisation


*** Les todo
**** TODo to "Fini" quand tout les sous arbres sont fait
    #+begin_src emacs-lisp
     (defun org-summary-todo (n-done n-not-done)
       "Switch entry to DONE when all subentries are done, to TODO otherwise."
       (let (org-log-done org-log-states)   ; turn off logging
         (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

     (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)
    #+end_src

Pour les checkbox
    #+begin_src emacs-lisp
	    (defun my/org-checkbox-todo ()
	      "Switch header TODO state to DONE when all checkboxes are ticked, to TODO otherwise"
	      (let ((todo-state (org-get-todo-state)) beg end)
		(unless (not todo-state)
		  (save-excursion
		(org-back-to-heading t)
		(setq beg (point))
		(end-of-line)
		(setq end (point))
		(goto-char beg)
		(if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
			       end t)
		    (if (match-end 1)
		    (if (equal (match-string 1) "100%")
			(unless (string-equal todo-state "DONE")
			  (org-todo 'done))
		      (unless (string-equal todo-state "TODO")
			(org-todo 'todo)))
		      (if (and (> (match-end 2) (match-beginning 2))
			   (equal (match-string 2) (match-string 3)))
		      (unless (string-equal todo-state "DONE")
			(org-todo 'done))
		    (unless (string-equal todo-state "TODO")
		      (org-todo 'todo)))))))))
      
      (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
    #+end_src
**** Date de création des TODO

#+begin_src emacs-lisp :tangle no
  
  


(defun my/log-todo-creation-date (&rest ignore)
  "Log TODO creation time in the property drawer under the key 'CREATED'."
  (when (and (org-get-todo-state)
             (not (org-entry-get nil "CREATED")))
    (org-entry-put nil "CREATED" (format-time-string (cdr org-time-stamp-formats)))))

(advice-add 'org-insert-todo-heading :after #'my/log-todo-creation-date)
(advice-add 'org-insert-todo-heading-respect-content :after #'my/log-todo-creation-date)
(advice-add 'org-insert-todo-subheading :after #'my/log-todo-creation-date)

(add-hook 'org-after-todo-state-change-hook #'my/log-todo-creation-date)
  
#+end_src


*** Images internet, téléchargement direct en copié glissé (très pratique)

#+begin_src emacs-lisp
  
    (use-package org-download
    :config
  ;;lieu où sont stocké les images
  (setq-default org-download-image-dir "/home/msi/Notes/Roam/images/")
  
  ;; le nom du dossier est le nom du premier heading (pour donner au nom du dossier "Principales oeuvre de blabla")
    (setq-default org-download-heading-lvl 0)
  ;;obligatoire
    (add-hook 'dired-mode-hook 'org-download-enable)
    (add-hook #'org-download-yank #'org-download-rename-last-file)
    )
  
#+end_src


*** TODO Yasnippets de Latex dans org (désactiver)(et ouai magueule) 

#+begin_src emacs-lisp

  (defun my-org-latex-yas ()
    (yas-minor-mode)
    (yas-activate-extra-mode 'latex-mode))


  (add-hook 'org-mode-hook #'my-org-latex-yas)  
#+end_src

 

*** Always redisplay inline images after executing SRC block
    #+begin_src emacs-lisp
(eval-after-load 'org
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images))
    #+end_src

*** ANNULÉ Graph avec graphviz
CLOSED: [2021-08-18 mer. 11:41]
:PROPERTIES:
:CREATED:  <2021-08-18 mer. 11:41>
:END:
    #+begin_src emacs-lisp
      
      ;; (use-package graphviz-dot-mode
      ;;    
      ;;   :config
      ;;   (setq graphviz-dot-indent-width 4))
      
    #+end_src
*** Empêcher la validation d’une tâche dont tous les enfants/cases non validées

#+begin_src emacs-lisp
  
  ;; (setq org-enforce-todo-dependencies t)
  ;; (setq org-enforce-todo-checkbox-dependencies t)
  
#+end_src

*** Annulation de la demande de confirmation lors de la demande d'évaluation du code
     #+begin_src emacs-lisp 
(setq org-confirm-babel-evaluate nil)
     #+end_src

*** Suppression de la demande d'autorisation d'exécution de code

     #+begin_src emacs-lisp
(setq org-confirm-babel-evaluate nil)
     #+end_src

*** Mise en forme du code

**** Indente le code selon le language
Dans les blocs de code, on veut la mise en évidence de syntaxe, et l'on
utilise la touche TAB pour indenter (et non pour insérer une tabulation)


#+begin_src emacs-lisp 
  (setq org-src-tab-acts-natively t)
#+end_src


#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
#+end_src




*** ANNULÉ F12 org-agenda
CLOSED: [2021-10-18 Mon 21:33]


#+begin_src emacs-lisp
  ;; (global-set-key (kbd "<f12>") nil)
#+end_src

*** Autres languages compris par org mode

Do not load all to booste the startup time 

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     ;; (ditaa      . t)
     (C          . t)
     ;; (dot        . t)
     (emacs-lisp . t)
     ;; (scheme     . t)
     ;; (gnuplot    . t)
     ;; (haskell    . t)
     (latex      . t)
     ;; (js         . t)
     ;; (ledger     . t)
     ;; (matlab     . t)
     ;; (ocaml      . t)
     ;; (octave     . t)
     ;; (plantuml   . t)
     (python     . t)
     ;; (R          . t)
     ;; (ruby       . t)
     ;; (screen     . nil)
     ;; (scheme     . t)
     (shell      . t)
     (sql        . t)
     (sqlite     . t)
     (java     . t)
     )
   )
  
  ;;enterpreter of python
  (setq org-babel-python-command "python3")
  
  
  
#+end_src

*** Mettre toutes les tâche "DONE" en archive (fichier ou subtree):

If you call Org-Agenda from within the buffer you want to archive you can temporarily restrict it to only that buffer and view only todo entries and filter for only DONE

C-c a < t
N r

Where N corresponds to the shortcut for your DONE state (with default states it would be 2)

Then you'd simply need to mark all the desired headlines and bulk archive

m (mark for bulk action)
B a (or B $ for arch->sibling)


#+begin_src emacs-lisp
  
  (defun org-archive-done-tasks-in-file ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'file))
  
  (defun org-archive-done-tasks-in-subtree ()
  (interactive)
  (org-map-entries
   (lambda ()
     (org-archive-subtree)
     (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
   "/DONE" 'tree))
  
#+end_src

*** Jouer un son quand "Done" (à faire)

#+begin_src emacs-lisp
  
  (defun my-org-after-todo-state-change ()
    (when (string-equal org-state "DONE")
      (org-clock-out-if-current)
      (emms-add-file "/home/msi/.emacs.d/sound/done.mp3")
      (emms-start)
      ;; (emms-play-file "/home/msi/.emacs.d/sound/done.mp3")
      )
    )
  
  (add-hook 'org-after-todo-state-change-hook 'my-org-after-todo-state-change)
  
#+end_src

** GTD

*** Org agenda

**** Liste des fichiers dans org agenda

#+begin_src emacs-lisp
  
  ;;pour termux !!!
  ;; (setq org-directory
  ;; (if dw/is-termux
  ;;     "~/storage/shared/Notes"
  ;;     "~/Notes"))
  
  
  (use-package org
    :custom
    ;; vue agenda, demande confirmation pour supprimer
    (org-agenda-confirm-kill 0)
    :config  
  
  
    ;; recursively find .org (or .txt, .exemple etc) files in provided directory
    ;; modified from an Emacs Lisp Intro example
    ;; ceci pour mettre 
    (defun sa-find-org-file-recursively (&optional directory filext)
      "Return .org and .org_archive files recursively from DIRECTORY.
  If FILEXT is provided, return files with extension FILEXT instead."
      (interactive "DDirectory: ")
      (let* (org-file-list
	     (case-fold-search t)         ; filesystems are case sensitive
	     (file-name-regex "^[^.#].*") ; exclude dot, autosave, and backupfiles
	     (filext (or filext "org$\\\|org_archive"))
	     (fileregex (format "%s\\.\\(%s$\\)" file-name-regex filext))
	     (cur-dir-list (directory-files directory t file-name-regex)))
	;; loop over directory listing
	(dolist (file-or-dir cur-dir-list org-file-list) ; returns org-file-list
	  (cond
	   ((file-regular-p file-or-dir)             ; regular files
	    (if (string-match fileregex file-or-dir) ; org files
		(add-to-list 'org-file-list file-or-dir)))
	   ((file-directory-p file-or-dir)
	    (dolist (org-file (sa-find-org-file-recursively file-or-dir filext)
			      org-file-list) ; add files found to result
	      (add-to-list 'org-file-list org-file)))))))
  
  
    ;; ceci renvoie une chaine de texte
    ;; (setq org-agenda-text-search-extra-files
    ;; (append (sa-find-org-file-recursively "~/org/dir1/" "txt")
    ;; (sa-find-org-file-recursively "~/org/dir2/" "tex")))
  
    (setq org-agenda-files
	  (append (sa-find-org-file-recursively "/home/msi/Notes/Roam/" "org")
		  (sa-find-org-file-recursively "/home/msi/Dossier_partage_nous_deux/Orgzly/" "org")))
  
  
  
  
  
  
    ;;pour start avec le mode follow dans org agenda  
    ;; (setq org-agenda-start-with-follow-mode t)
  
    (define-key org-agenda-mode-map [remap next-line] #'org-agenda-next-item)
    (define-key org-agenda-mode-map [remap previous-line] #'org-agenda-previous-item)
    (define-key org-agenda-mode-map [remap ?\r] #'org-agenda-goto)
  
    )
  
  (use-package org-contrib
    :after org  
    :config
    (require 'org-contacts)
    (setq org-contacts-files '("/home/msi/Notes/Roam/GTD/7Contact.org"))
    )
  
  
  
  
  
  
  
#+end_src

ancien org-agenda-files:


    ;; (setq org-agenda-files '(
    ;; (directory-files-recursively "/home/msi/Notes/Roam/" "\\.org$")
  
  
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/1Inbox.org"
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/2Agendatickler.org"
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/3Someday.org"
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/4GTD.org"
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/5References(liensTextes).org"
  
    ;; 			   ;; "/home/msi/Notes/Roam/GTD/7Tout.org"
  
    ;; "/home/msi/Dossier_partage_nous_deux/Orgzly/"
  
    ;; "/home/msi/Notes/Roam/"
    ;; )
    ;; )
  
    ;; (setq org-agenda-files '(directory-files-recursively "/home/msi/Notes/Roam/" "\\.org$"))
    ;; (setq org-agenda-files '("/home/msi/Dossier_partage_nous_deux/Orgzly/" "/home/msi/Notes/Roam/"))


**** Syncronisation avec google calendar !

***** Règle en anglais pour les exports

#+begin_src emacs-lisp 
    
    
    (eval-after-load 'org
      (setq system-time-locale "C")
      )
  
    
#+end_src


***** Lieu de l'export org-icalendar-combine-agenda-files


#+begin_src emacs-lisp 
  
  
  
  
  (setq org-icalendar-combined-agenda-file "/home/msi/Notes/Roam/GTD/0org.ics")
  
  
  
#+end_src


***** Pour exporter automatiquement avec l'agenda ICS


#+begin_src emacs-lisp 
  
  
  
  ;;fonction export en background + message pour vérif que ça marche
  (defun org-icalendar-combine-agenda-files-background()
    (interactive)
    (message "Lancement du icalendar combine file (pour 0org.ics)")
    (org-icalendar-combine-agenda-files t)
  
    )
  
  
  (defun org-icalendar-combine-agenda-files-forground()
    (interactive)
    (org-icalendar-combine-agenda-files nil)
    (message "fini")
    )
  
  
  ;;au démarrage
  (add-hook 'dashboard-mode-hook #'org-icalendar-combine-agenda-files-background)
  
  ;;au démarrage
  
  ;; (add-hook 'emacs-startup-hook #'org-icalendar-combine-agenda-files-background)
  
  
  
  
  
  
  
  
  ;;lorsque l'on lance org agenda 
  ;; (add-hook 'org-agenda-mode-hook #'org-icalendar-combine-agenda-files-background)
  
  ;;quand on ferme emacs  
  ;; (add-hook #'kill-emacs-hook #'org-icalendar-combine-agenda-files)
  
  (add-hook #'save-buffers-kill-terminal #'tool-bar-mode)
  
  
  
  
  
#+end_src
  
  
  


***** Pour exporter les todo et les schedulded en ICS








#+begin_src emacs-lisp 
  
  
  
  
  
  
  ;;inclut seulement les todo, mais aussi les donne. Sans heure
  ;; (setq org-icalendar-include-todo t)
  
  
  ;;exporter avec les statse
  (setq org-icalendar-categories '(all-tags category todo-state))
  
  ;; (setq org-icalendar-use-deadline '(event-if-not-todo todo-due))
  
  
  ;;export les schedulde seulement si elles sont pas en done ! N'exporte pas les titres sans le TODO NEXT etc
  (setq org-icalendar-use-scheduled '(event-if-todo-not-done))
  
  ;; (setq org-icalendar-with-timestamps 'active)
  
  ;; (setq org-icalendar-alarm-time 30)
  
  
#+end_src




*** Org capture

**** org capture avec les yasnippets !!!

#+begin_src emacs-lisp
  
  (defgroup ya-org-capture nil
    "Options specific to ya-org-capture."
    :tag "ya-org-capture"
    :group 'ya-org-capture)
  
  (defcustom ya-org-capture/ya-prefix "YA-ORG-CAPTURE-PREFIX-- "
    "Prefix used to tag."
    :group 'ya-org-capture
    :type 'string)
  
  (defcustom ya-org-capture/expand-snippet-functions (list 'yankpad-expand 'yas-expand)
    "Functions used to expand the snippet at point. Order is
    important: if the functions are able to expand a snippet with
    the same key, the first function of the list takes precedence
    over the second."
    :group 'ya-org-capture
    :type 'list)
  
  (defun ya-org-capture/or-else (&rest fs)
    "Compose partial functions FS until one of them produces a result or there are no more FS available."
    `(lambda (i)
       (reduce
	(lambda (acc f) (or acc (when (fboundp f) (funcall f i))))
	',fs
	:initial-value nil)))
  
  (defun ya-org-capture/org-capture-fill-template ()
    "Post-process `org-mode' snippet to expand `org-capture' syntax. This only works for YASnippet."
    (let ((template (buffer-substring-no-properties yas-snippet-beg yas-snippet-end))
	  (front-text (buffer-substring-no-properties (point-min) yas-snippet-beg))
	  (back-text (buffer-substring-no-properties yas-snippet-end (point-max)))
	  (ya-org-capture--temp-buffer (get-buffer-create "ya-org-capture-temp")))
      (with-current-buffer ya-org-capture--temp-buffer
	(insert front-text
		(org-capture-fill-template template)
		back-text))
      (replace-buffer-contents ya-org-capture--temp-buffer)
      (kill-buffer ya-org-capture--temp-buffer)))
  
  (defun ya-org-capture/snippet-expand ()
    "Try to expand snippet at point with `yankdpad-expand' and then with `yas-expand'."
    (interactive)
    (funcall (apply 'ya-org-capture/or-else ya-org-capture/expand-snippet-functions) nil))
  
  (defun ya-org-capture/support-org-syntax-for-yasnippets ()
    "Allow `org-capture' to expand its syntax for YASnippets."
    (add-hook 'yas-after-exit-snippet-hook 'ya-org-capture/org-capture-fill-template nil t))
  
  (defun ya-org-capture/expand-snippets ()
    "Expand `ya-org-capture/ya-prefix'."
    (when (search-forward ya-org-capture/ya-prefix nil t)
      (replace-match "")
      (ya-org-capture/support-org-syntax-for-yasnippets)
      (end-of-line)
      (ya-org-capture/snippet-expand)))
  
  ;;;###autoload
  (defun ya-org-capture/make-snippet (snippet-name &optional yp-category)
    "Concatenate prefix to SNIPPET-NAME for substitution in `org-capture' flow.
  Optionally set `yankpad-category' to YP-CATEGORY."
    (if yp-category (yankpad-set-local-category yp-category))
    (concatenate 'string ya-org-capture/ya-prefix snippet-name "\n"))
  
  (defun ya-org-capture/setup ()
    "Setup integration between org-capture and yasnippet/yankpad."
    (interactive)
    (add-hook 'org-capture-mode-hook 'ya-org-capture/expand-snippets))
  
  
  (defun ya-org-capture/teardown ()
    "Teardown integration between org-capture and yasnippet/yankpad."
    (interactive)
    (remove-hook 'org-capture-mode-hook 'ya-org-capture/expand-snippets))
  
  
  (use-package yankpad)
  
  
  
  (ya-org-capture/setup)
  
#+end_src

**** org capture de base
:PROPERTIES:
:ID:       12ff4cd7-5e78-436f-8bf1-37d16345a67a
:END:
"* %?\n\n%^T"

"* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n"




#+begin_src emacs-lisp


  (setq org-capture-templates '
        (  

         ("i" "Todo [inbox]" entry
          (file "/home/msi/Notes/Roam/GTD/1Inbox.org")
          "* TODO %(ya-org-capture/make-snippet \"toaf\")\n")


         ("t" "Agenda sur google")

         ("ts" "Évènement sur plusieurs heures" entry (file "/home/msi/Notes/Roam/GTD/2Agendatickler.org") "* TODO %(ya-org-capture/make-snippet \"tfoaf\"\n )" :empty-lines 2)

         ("ti" "Évenement plusieurs jours " entry
          (file "/home/msi/Notes/Roam/GTD/2Agendatickler.org")
          "* TODO %(ya-org-capture/make-snippet \"tsdoaf\")\n")


         ("te" "Tickler " entry
          (file "/home/msi/Notes/Roam/GTD/2Agendatickler.org")
          "* %(ya-org-capture/make-snippet \"twehoaf\")\n")

         ("tr" "Jour entier" entry (file "/home/msi/Notes/Roam/GTD/2Agendatickler.org") "* TODO %(ya-org-capture/make-snippet \"tdoaf\"\n )" :empty-lines 2)


         ("tt" "Edt / Todo avec temps refile" entry
          (file "/home/msi/Notes/Roam/GTD/2Agendatickler.org")
          "* TODO %(ya-org-capture/make-snippet \"twehoar\")\n")




         ("r" "Todo (refile)" entry
          (file "/home/msi/Notes/Roam/GTD/1Inbox.org")
          "* TODO %(ya-org-capture/make-snippet \"oafr\")\n")


         ("f" "Film org roam" entry
          (file "/home/msi/Notes/Roam/GTD/films_vus.org")
          (file "/home/msi/Notes/TemplatesOrgCapture/film_roam.org"))

         ("l" "Livre org roam" entry
          (file "/home/msi/Notes/Roam/GTD/livres_lus.org")
          (file "/home/msi/Notes/TemplatesOrgCapture/livre_roam.org"))


         ("C" "Contact" entry
          (file+headline "/home/msi/Notes/Roam/GTD/7Contact.org" "1Inbox")
          (file "/home/msi/Notes/TemplatesOrgCapture/contact.org")
          :immediate-finish t
          ;; :jump-to-captured t
          )

         ;; ("i" "Inbox/journal")

         ("a" "Image dans Artiste")

         ("at" "Image + artiste" entry (file  "/home/msi/Dossier_partage_nous_deux/Orgzly/8Artistes.org" )
          (file "/home/msi/Notes/TemplatesOrgCapture/artistes.org")
          :jump-to-captured 1
          )

         ("as" "Image" entry (file  "/home/msi/Dossier_partage_nous_deux/Orgzly/8Artistes.org" )
          (file "/home/msi/Notes/TemplatesOrgCapture/image.org")
          :jump-to-captured 1
          )

  

         ("d" "Journal de dissactifaction" entry (file  "/home/msi/Notes/Roam/journal_de_dissatisfaction.org" )
          "* %<%Y-%m-%d> \n- %?")

         ("L" "Web site" entry
          (file "/home/msi/notes.org")
          "* %a :website:\n\n%U %?\n\n%:initial")

         ("z" "Link" entry (file+olp "/path/to/notes.org" "Web Links")
          "* %a\n %?\n %i")


         ;;         ("c" "Contacts" entry (file "~/Org/contacts.org")
         ;;          "* %(org-contacts-template-name)
         ;; :PROPERTIES:
         ;; :EMAIL: %(org-contacts-template-email)
         ;; :END:")


         ("o" "[Ne pas utiliser]Pour stocker mes raccourcis" entry
          (file+headline "/home/msi/Notes/Roam/GTD/3Bookmarks.org" "1INBOX")
          "* %a %U"
          :immediate-finish t)


         ("E" "Microsoft Exchange diary entry" entry (file "/home/msi/Notes/TemplatesOrgCapture/test.org")
          (function my-visit-timestamped-file) "<test")


         ("A" "test" entry (file  "/home/msi/Notes/Roam/GTD/films_vus.org" )
          (file "/home/msi/Notes/TemplatesOrgCapture/test.org")
          )




         )

        )



  ;; pour rajouter un ID à la fin de la capture !
  (defun cp-org-capture-finalize ()
    "Comprend la valeur de la key de org capture et décide de faire qql après le capture ou pas"
    (let ((key  (plist-get org-capture-plist :key))
          (desc (plist-get org-capture-plist :description)))
      (if org-note-abort
          (message "Template with key %s and description “%s” aborted" key desc)
        (message "Template with key %s and description “%s” run successfully" key desc)
        )
      (when (string= key "A") 		;si jamais c'est A, alors faire la suite
        (org-capture-goto-last-stored)
        (org-id-get-create)	    
        )
      )
    )
    ;; (add-hook 'org-capture-after-finalize-hook 'cp-test-finalize)


#+end_src







**** Refile targets



;;ancien
("/home/msi/Notes/Roam/GTD/4GTD.org"
	   :maxlevel . 3)
	  ("/home/msi/Notes/Roam/GTD/3Someday.org"
	   :maxlevel . 1
  
	   )
	  ;; ("/home/msi/Notes/Roam/GTD/6Archives.org"
	  ;;  :level .1)
	  ("/home/msi/Notes/Roam/GTD/2Agendatickler.org"
	   :level . 1)
	  ("/home/msi/Notes/Roam/GTD/5References(liensTextes).org"
	   :maxlevel . 3)

#+begin_src emacs-lisp
  
  ;; pour supprimer un fichier de l'agenda
  
  (org-remove-file "/home/msi/Notes/Roam/GTD/6Archives.org")
  
  (setq
   org-refile-targets
   '(
    ;;refile dans le buffer courant jusqu'au niveau 9
     (nil :maxlevel . 9)
     ;;refile dans tous les fichiers de l'agenda
     (org-agenda-files :maxlevel . 5)
  
     ;;pour refile dans references commun
     ("/home/msi/Dossier_partage_nous_deux/Orgzly/1Referencescommun.org" :maxlevel . 5)
  
     ;; (org-roam-directory :maxlevel . 5)
  
  ("/home/msi/Notes/Roam/GTD/6Archives.org" :maxlevel . 5)
  
     ))
  
  
  
  
  
  
  
  ;;pour voir le chemin lors du refile
  (setq org-outline-path-complete-in-steps nil)
					  ; permet de déplacer avec un niveau de titre 1 ! (dans tickler par exemple)
  (setq org-refile-use-outline-path (quote file))
  
  
  
#+end_src

		   



			   
*** trier par tag (désactiver)
#+begin_src emacs-lisp
  ;; (setq org-agenda-custom-commands 
  ;;       '(("o" "At the office" tags-todo "@office"
  ;; 	 ((org-agenda-overriding-header "Office")))))
  
#+end_src

*** ne faire que le premier todo avec orgagenda (o)(voir ça comme des moment pour les contraintes)






#+begin_src emacs-lisp
  
  
  
      ;; pour que le curseur soit sur l'agenda quand t on l'ouvre
      ;; (add-hook 'org-agenda-finalize-hook #'org-agenda-find-same-or-today-or-agenda 90)
  
  ;;  pour que le curseur soit en haut de org agenda quand t on l'ouvre
    (add-hook 'org-agenda-finalize-hook (lambda () (goto-char (point-min))) 90)
  
      ;;ouvre l'agenda dans la window actuel
      (setq org-agenda-window-setup 'current-window)
  
  
  
  
      ;; quand commance l'agenda ?
  
      ;;pas le week
      (setq org-agenda-start-on-weekday nil)
  
      ;; mais X jour après aujourd'hui
      (setq org-agenda-start-day "+0d")
  
      ;;vue de l'agenda sur X jours
      (setq org-agenda-span 8)
  
      ;;?
      (setq org-agenda-start-with-log-mode t)
  
      ;; Make done tasks show up in the agenda log
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)
  
      ;;pour la fonction org columns agenda. Utilité ?
      ;; (setq org-columns-default-format "%20CATEGORY(Category) %65ITEM(Task) %TODO %6Effort(Estim){:}  %6CLOCKSUM(Clock) %TAGS")
  
  
  
      (setq org-agenda-custom-commands 
	    '(
	      ("d" "Dashboard"
	       (
  
		(todo "RAPPEL" ((org-agenda-overriding-header "Se souvenir")))
  
		(tags-todo "+PRIORITY=\"A\""
			   ((org-agenda-overriding-header "High Priority")))
		;; (search "#A"
			   ;; ((org-agenda-overriding-header "Test de haut")))
		(tags-todo "+followup" ((org-agenda-overriding-header "Needs Follow Up")))
		(tags-todo "+batch" ((org-agenda-overriding-header "À ranger")))
  
		(todo "NEXT"
		      ((org-agenda-overriding-header "Next Actions")
		       (org-agenda-max-todos nil)))
		(todo "TODO"
		      ((org-agenda-overriding-header "Unprocessed Inbox Tasks (Tout ce qui est dans 1Inbox)")
		       (org-agenda-files '("/home/msi/Notes/Roam/GTD/1Inbox.org")))
		      (org-agenda-text-search-extra-files nil))
		(agenda "" ((org-deadline-warning-days 7)))
		(todo "WAIT"
		      ((org-agenda-overriding-header "Wait")
		       (org-agenda-max-todos nil)))
		)
  
  
	       )
  
	      ("n" "Next Tasks"
	       (
		(todo "NEXT"  
		      ((org-agenda-overriding-header "Next Tasks")))))
  
  
	      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
	       ((org-agenda-overriding-header "Low Effort Tasks")
		(org-agenda-max-todos 20)
		(org-agenda-files org-agenda-files)))
  
  
  ;; (("ii" "[i]nbox tagged unscheduled tasks" tags "+inbox-SCHEDULED={.+}/!+TODO|+STARTED|+WAITING"))
  
  
	      ("o" "At the office" tags-todo "@office"
	       ((org-agenda-overriding-header "Office")
		(org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
  
	      ("p" "Avec pc" tags-todo "@pc"
	       ((org-agenda-overriding-header "Pc")
		(org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
  
	      ("w" "Pour le boulot" tags-todo "@work"
	       ((org-agenda-overriding-header "Work")
		(org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
  
	      ("n" "PourNell" tags-todo "@Nell"
	       ((org-agenda-overriding-header "Nell")
		(org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
  
	      ("h" "À la maison" tags-todo "@home"
	       ((org-agenda-overriding-header "Home")
		(org-agenda-skip-function #'my-org-agenda-skip-all-siblings-but-first)))
  
	      )
	    )
  
  
  
  
      ;; pour appeler directement dashboard
  
      (defun org-agenda-show-dashboard (&optional arg)
      (interactive "P")
      (setq org-agenda-todo-ignore-scheduled t) ;;pour ne pas afficher les tâche schedulded
      (org-agenda arg "d")
      )
  
  
    (global-set-key (kbd "<f12>") 'org-agenda-show-dashboard)
  
  
      (defun my-org-agenda-skip-all-siblings-but-first ()
	"Skip all but the first non-done entry."
	(let (should-skip-entry)
	  (unless (org-current-is-todo)
	    (setq should-skip-entry t))
	  (save-excursion
	    (while (and (not should-skip-entry) (org-goto-sibling t))
	      (when (org-current-is-todo)
		(setq should-skip-entry t))))
	  (when should-skip-entry
	    (or (outline-next-heading)
		(goto-char (point-max))))))
  
      (defun org-current-is-todo ()
	(string= "TODO" (org-get-todo-state)))
  
  
  
  
  
  #+end_src



*** Tag


    followup - Someone is waiting on me to follow up on this task, it should be prioritized above others
    batch - The task can be batched with others (low effort)

    @home and @work tags for explicit contexts and then the rest are used for filtering tasks for agenda views : quand je peux le faire ?


#+begin_src emacs-lisp
  (setq org-tag-alist '((:startgroup . nil)
  
     ; Put mutually exclusive tags here
  
			(:endgroup . nil)
  
			("@work" . ?w)
			("@home" . ?h)
			("@pc" . ?p)
			("@tel" . ?t)
			("Nell" . ?n)
			("batch" . ?b)
			("followup" . ?f)
  
			)
  
	)
#+end_src
*** Pour savoir qd fini une tâche

#+begin_src emacs-lisp
(setq org-log-done t)
#+end_src
*** Modification de l'emplacement d'archive

  ;;avant, ce qui y placé dans le grand titre "Archives"
  "/home/msi/Notes/Roam/GTD/6Archives.org::* Archives"


[[/home/msi/Notes/Roam/GTD/6Archives.org::*Archives de Projet]]
  
#+begin_src emacs-lisp
  
  
  (setq org-archive-location "/home/msi/Notes/Roam/GTD/6Archives.org::* Archives Autres")
  
  
#+end_src
*** Nouveau keyword/todo (couleurs)


    TODO - A task that should be done at some point
    NEXT - This task should be done next (in the Getting Things Done sense)
    BACK - A task in the backlog to be done some day but not now
    WAIT - Waiting for someone else to be actionable again
    DONE - It's done!
    RAPPEL - Se souvenir, mais pas forcément y faire

#+begin_src emacs-lisp 
      
      (setq org-todo-keywords
	    '(
	      (sequence "TODO(t)" "NEXT(n)" "RAPPEL(r)""|" "DONE(d)")
	      (sequence "|" "WAIT(w)" "CANCELLED(c)")
	      )
	    )
      
      
      
      ;; TODO: org-todo-keyword-faces
    (setq org-todo-keyword-faces
      '(("NEXT" . (:foreground "orange red" :weight bold))
	("WAIT" . (:foreground "HotPink2" :weight bold))
	("BACK" . (:foreground "MediumPurple3" :weight bold))
	("RAPPEL" . (:foreground "white" :weight bold))
	))
      
      
      
#+end_src
** TODO Org protocol (capture de page web)

[[https://stackoverflow.com/questions/7464951/how-can-i-make-org-protocol-work-on-openbox][ici]]

#+begin_src emacs-lisp 
  
  

    (require 'org-protocol)
  
  
  
  (use-package  org-protocol-capture-html
   :straight  (org-protocol-capture-html :type git :host github :repo "alphapapa/org-protocol-capture-html")
   :after (org)
   :init
   (require 'org-protocol-capture-html)
   )
  
  
  
  
#+end_src


** Jouer du son

#+begin_src emacs-lisp
  
    (use-package emms)
    (emms-all)
  (emms-default-players)
  ;; (setq emms-source-file-default-directory "/home/msi/Notes/Roam/sounds")
     (use-package org-emms)
  
#+end_srcQQ
* Nouvelles fonctionnalitées

** Internet

*** eww en mode readeble (bc plus simple de lire)



#+begin_src emacs-lisp 

(add-hook 'eww-after-render-hook 'eww-readable)

#+end_src


*** w3w (autre navigateur)


 (setq browse-url-browser-function 'w3m-browse-url)

#+begin_src emacs-lisp 
  
  ;; (use-package emacs-w3m)
  
#+end_src

** Org roam 
*** Org roam ui (org roam server pour org roam v2), Vue en bulle
:PROPERTIES:
:CREATED:  <2021-08-16 lun. 23:11>
:END:


[[https://github.com/org-roam/org-roam-ui]]


#+begin_src emacs-lisp
  
   (use-package org-roam-ui
   :straight
     (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
     :after org-roam
     :hook (after-init . org-roam-ui-mode)
     :config
     (setq org-roam-ui-sync-theme t
	   org-roam-ui-follow t
	   org-roam-ui-update-on-save t
	   org-roam-ui-open-on-start nil))
  
#+end_src

 
*** Hydra pour org-roam

#+begin_src emacs-lisp
      (defhydra hydra-roam (:exit t :color teal
				 :hint nil)
      "
    _a_:deft  _e_:find filE  _i_:nsert   _g_:raph _,_:ajouter un alias
      _u_:donneruneidautitre  _s_:erver o:org-roam/backlinks j:daily roam
      "
      ("q" nil "quit" :color blue)
      ("o" org-roam-buffer-toggle)
      ("a" deft)
      ("e" org-roam-node-find)
      ("i" org-roam-node-insert)
      ("g" org-roam-graph)
      ("u" org-id-get-create)
      ("," org-roam-alias-add)
      ("s" org-roam-ui-mode)
      ("j" org-roam-dailies-capture-today)
      ("t" org-roam-node-random)
  
  
  
      )
  
    (global-set-key (kbd "C-c r") 'hydra-roam/body)
  
  
  (pretty-hydra-define jnf-find-file-in-roam-project (:foreign-keys warn :title "test" :quit-key "q")
    (
     "Permanent"
     (("b" org-roam-dailies-map "Bibliography")
      ("c" go-roam-find-permanent-cards "Card"))
     "RPGs"
     (("a" go-roam-find-ardu "Ardu, World of")
      ("t" go-roam-find-thel-sector "Thel Sector"))
     "Work"
     (("h" go-roam-find-hesburgh-libraries "Hesburgh Libraries")
      ("s" go-roam-find-samvera "Samvera"))
  
     ))
  
  
#+end_src




*** Deft, pour chercher dans tous org roam [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&ved=2ahUKEwjHhJiHku_xAhUJJhoKHaF0AXgQFjABegQIBxAD&url=https%3A%2F%2Fbuildfunthings.com%2Fposts%2Femacs-org-roam-and-deft%2F&usg=AOvVaw1fhHxITY2IUHTCFGwcaJgT][ici]]

#+begin_src emacs-lisp
  
   
  
  (use-package deft
  :config
  (setq deft-extensions '("org")
        deft-directory "/home/msi/Notes/Roam/"
        deft-recursive t
        deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n"
        deft-use-filename-as-title t)
  :bind
  ("C-c n d" . deft))
  
  
#+end_src

*** Org roam(moteur)

[[https://systemcrafters.net/build-a-second-brain-in-emacs/capturing-notes-efficiently/][pour les templates]] (%? = place du curseur)

#+begin_src emacs-lisp
  
  (use-package org-roam
    :init
    ;;éviter d'avoir la nottif de version 1 à 2
    (setq org-roam-v2-ack t)
    :custom
    ;; (org-roam-directory "/home/msi/Notes/Roam")
    (org-roam-completion-everywhere t)
    ;;bien mettre "target" et non "if-new" !!!
    (org-roam-dailies-capture-templates
     '(("d" "default" entry "* %<%I:%M %p>: %?"
	:target (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n")
	:empty-lines 1)
  
       ))     
  
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
  
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
  
    (setq org-roam-directory (file-truename "~/Notes/Roam/"))
  
  
    ;; (setq org-roam-directory 
			       ;; "~/Notes/Roam/"
  
			       ;; '("/home/msi/Orgzly/" "~/Notes/Roam/GTD/Test/")
  
	  ;; )
  
  
  
  
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
  
    ;; pour org-roam capture fonctionne
    (advice-remove 'org-roam-capture--get-target #'org-roam-capture--get-if-new-target-a)
  
    ;;bien mettre "target" et non "if-new" !!!
    (setq org-roam-capture-templates
	  '(("d" "default" plain
	     "%?"
	     :target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U\n")
	     :unnarrowed t)
	    ("a" "Quelqu'un avec des idée, œuvres" plain
	     "* Résumé de sa vie, personnel\n\nNé en %? et mort en \n\n* Principales œuvres ou idées de ${title}"
	     :target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U")
	     :unnarrowed t)
  
	    ("v" "Ville" plain
	     "\n* Situation géographique, historique et politique de ${title}\n\n%?\n\n\n* Patrimoine architectural et culturel de ${title}\n\n\n* Dans la culture populaire et les généralités de ${title}\n"
	     :target (file+head "${slug}.org" "#+title: ${title}\n#+date: %U")
	     :unnarrowed t)
  
  
  
  
	    ;; ("b" "book notes" plain (file "~/RoamNotes/Templates/BookNoteTemplate.org")
	    ;; :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    ;; :unnarrowed t)
  
  
	    ("b" "book notes" plain
	     "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* Summary\n\n%?"
	     :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	     :unnarrowed t)
  
	    ;; ("f" "Film" entry ;;(file "~/Notes/Roam/GTD/films_vus.org")
	    ;; "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n** Summary\n\n%?"
	    ;; :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	    ;; :unnarrowed t)
  
	    ("x" "book notes" entry (file "/home/msi/Notes/TemplatesOrgCapture/test.org")
	     :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	     :unnarrowed t)
  
  
	    ))
  
  
  
  
  
  
  
  
    ;;pour avoir le nombre de backlinks lorsque que l'on cherche un node
    (cl-defmethod org-roam-node-directories ((node org-roam-node))
      (if-let ((dirs (file-name-directory (file-relative-name (org-roam-node-file node) org-roam-directory))))
	  (format "%s" (car (f-split dirs)))
	""))
  
    (cl-defmethod org-roam-node-backlinkscount ((node org-roam-node))
      (let* ((count (caar (org-roam-db-query
			   [:select (funcall count source)
				    :from links
				    :where (= dest $s1)
				    :and (= type "id")]
			   (org-roam-node-id node)))))
	(format "%d" count)))
  
    ;; (setq org-roam-node-display-template "${directories:10} ${tags:10} ${title:100} ${backlinkscount:6}")
  
  
  
    ;;pour avoir la hiérarchie lorsque c'est une sous note 
    (cl-defmethod org-roam-node-filetitle ((node org-roam-node))
      "Return the file TITLE for the node."
      (org-roam-get-keyword "TITLE" (org-roam-node-file node)))
  
    (cl-defmethod org-roam-node-hierarchy ((node org-roam-node))
      "Return the hierarchy for the node."
      (let ((title (org-roam-node-title node))
	    (olp (org-roam-node-olp node))
	    (level (org-roam-node-level node))
	    (filetitle (org-roam-node-filetitle node)))
	(concat
	 (if (> level 0) (concat filetitle " -> "))
	 (if (> level 1) (concat (string-join olp " -> ") " -> "))
	 title)) ;; erreur de parenthèse ici mais ça marche ?
      )
  
  
  
    ;; qu'est ce qu'on met lorsque l'on recherche un node (nombre = nombre de caractère)
    (setq org-roam-node-display-template "${directories:5} ${hierarchy:120} ${tags:40} ${backlinkscount:1}")
  
  
  
  
  
  
  
    ;; for org-roam-buffer-toggle
    ;; Recommendation in the official manual
    (add-to-list 'display-buffer-alist
		 '("\\*org-roam\\*"
		   (display-buffer-in-direction)
		   (direction . right)
		   (window-width . 0.33)
		   (window-height . fit-window-to-buffer)))
  
  
    ) ;; fin org roam ici
  
  
  
  (add-hook 'org-roam-node-find-hook
	    (lambda ()
	      (and (org-roam-file-p)
		   (not (eq 'visible (org-roam-buffer--visibility)))
		   (org-roam-buffer-toggle))))
  
  
  
  
  
  
#+end_src


=Patching Ox-html to support ID export=

(defun org-html--reference (datum info &optional named-only)
  "Return an appropriate reference for DATUM.
DATUM is an element or a `target' type object.  INFO is the
current export state, as a plist.
When NAMED-ONLY is non-nil and DATUM has no NAME keyword, return
nil.  This doesn't apply to headlines, inline tasks, radio
targets and targets."
  (let* ((type (org-element-type datum))
	 (user-label
	  (org-element-property
	   (pcase type
	     ((or `headline `inlinetask) :CUSTOM_ID)
	     ((or `radio-target `target) :value)
	     (_ :name))
	   datum))
         (user-label (or user-label
                         (when-let ((path (org-element-property :ID datum)))
                           (concat "ID-" path)))))
    (cond
     ((and user-label
	   (or (plist-get info :html-prefer-user-labels)
	       ;; Used CUSTOM_ID property unconditionally.
	       (memq type '(headline inlinetask))))
      user-label)
     ((and named-only
	   (not (memq type '(headline inlinetask radio-target target)))
	   (not user-label))
      nil)
     (t
      (org-export-get-reference datum info)))))


      




  The slug function is used to determine the filename to use for a node, based on its title. In org-roam v2, the slug is calculated in org-roam-node-slug. If you wish to change the default behaviour of the slug function, you should override the entire function.

For example, to use dashes rather than underscores in your slugs

(cl-defmethod org-roam-node-slug ((node org-roam-node))
    (let ((title (org-roam-node-title node)))
      (cl-flet* ((nonspacing-mark-p (char)
				    (memq char org-roam-slug-trim-chars))
		 (strip-nonspacing-marks (s)
					 (ucs-normalize-NFC-string
					  (apply #'string (seq-remove #'nonspacing-mark-p
								      (ucs-normalize-NFD-string s)))))
		 (cl-replace (title pair)
			     (replace-regexp-in-string (car pair) (cdr pair) title)))
	(let* ((pairs `(("[^[:alnum:][:digit:]]" . "-")  
			("--*" . "-")  
			("^-" . "")  
			("-$" . "")))
	       (slug (-reduce-from #'cl-replace (strip-nonspacing-marks title) pairs)))
	  (downcase slug)))))

    (org-roam-completion-everywhere t)
*** Org roam protocol, pour 

[[https://www.orgroam.com/manual.html#Org_002droam-Protocol][ici]]


#+begin_src emacs-lisp 

(require 'org-roam-protocol)

#+end_src

*** Cacher les propertie au début des fichier


#+begin_src emacs-lisp
  
  
(defun org-hide-properties ()
  "Hide all org-mode headline property drawers in buffer. Could be slow if it has a lot of overlays."
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward
            "^ *:properties:\n\\( *:.+?:.*\n\\)+ *:end:\n" nil t)
      (let ((ov_this (make-overlay (match-beginning 0) (match-end 0))))
        (overlay-put ov_this 'display "")
        (overlay-put ov_this 'hidden-prop-drawer t))))
  (put 'org-toggle-properties-hide-state 'state 'hidden))

(defun org-show-properties ()
  "Show all org-mode property drawers hidden by org-hide-properties."
  (remove-overlays (point-min) (point-max) 'hidden-prop-drawer t)
  (put 'org-toggle-properties-hide-state 'state 'shown))

(defun org-toggle-properties ()
  "Toggle visibility of property drawers."
  (interactive)
  (if (eq (get 'org-toggle-properties-hide-state 'state) 'hidden)
      (org-show-properties)
    (org-hide-properties)))

  
#+end_src



** EAF,  Super internet, écouteur de musique etc https://github.com/emacs-eaf/emacs-application-framework#install

*** Général
#+begin_src emacs-lisp
  
  (straight-use-package '(eaf :type git
			      :host github
			      :repo "manateelazycat/emacs-application-framework"
			      :files ("*.el" "*.py" "core" "app")))
  
  ;;pour run la commande (eaf-install-and...) seulement une fois (finir d'installer eaf)
  ;; (unless (package-installed-p 'jedi)
  ;; (eaf-install-and-update)
  ;; )
  ;;
  
  
  
  
  
  ;;pour tout le reste  
  (require 'eaf)
  
  
  ;;décocher les eaf nécessaire
  
  
  
  (require 'eaf-browser)
  
  ;; Pour télécharger les fichiers du web, à mettre aussi sur l'ordinateur
  
  ;; (use-package aria2
  ;;     ;; :after (xah-fly-keys)
  ;;     :straight '(aria2 :host github
  ;; 			:repo "emacsmirror/aria2"
  ;; 			;; :branch "main"
  ;; 			;; :files ("*.el" "out")
  ;; 			)
  ;;     :init  (require 'monpack) 
  ;; )
  
  ;; (require aria2)
  
  
  
  
  
  
  ;; (require 'eaf-pdf-viewer)
  
  ;; (add-to-list 'load-path "/home/msi/.emacs.d/straight/build/eaf/app/image-viewer")
  (require 'eaf-image-viewer)
  
  
  (require 'eaf-terminal)
  (require 'eaf-markdown-previewer)  
  
  
  
  
  
  
#+end_src


(use-package eaf
	:load-path "~/.emacs.d/site-lisp/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
     :init
     (use-package epc :defer t :ensure t)
     (use-package ctable :defer t :ensure t)
     (use-package deferred :defer t :ensure t)
     (use-package s :defer t :ensure t)
     :custom
     (eaf-browser-continue-where-left-off t)
     :config
     (eaf-setq eaf-browser-enable-adblocker "true")
  
  ;;   ;;Make EAF the Default Browser in Emacs
  ;; ;;  (setq browse-url-browser-function 'eaf-open-browser)
  ;;   ;;(defalias 'browse-web #'eaf-open-browser)
  
     (setq eaf-browser-continue-where-left-off t) ;; reprendre là où j'en étais
  
  
      
   
  
    (eaf-bind-key scroll_up_page "s" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down_page "d" eaf-pdf-viewer-keybinding)
  
     )

(eaf-bind-key scroll_up "s" eaf-browser-keybinding)
    (eaf-bind-key scroll_down "d" eaf-browser-keybinding)
    
    (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
    (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
    (eaf-bind-key take_photo "p" eaf-camera-keybinding)
    (eaf-bind-key nil "M-q" eaf-browser-keybinding);; unbind, see more in the Wiki
    
*** Touches

#+begin_src emacs-lisp 
  
  
  
  (major-mode-hydra-define eaf-mode
  
    (:title "EAF-major-mode" :color yellow :separator "-") ;;:color yellow marche pas mais permet de quitter partout
  
    ("Déplacements/Base"
  
     (
  
      ("t" eaf-py-proxy-toggle_adblocker "Adblocker" :exit t)
      ("s" eaf-py-proxy-toggle_dark_mode "Darkmode" :exit t)
      ("i"       eaf-py-proxy-copy_text "Copy le texte" :exit t)
      ("e"       eaf-py-proxy-copy_link "Copy le link" :exit t)
      ("v"       eaf-py-proxy-insert_or_history_backward "Reviens en arrière" :exit t)
      ("l"       eaf-py-proxy-insert_or_history_forward "Reviens en avant" :exit t)
      ;;impossible de le convertir vers firefox, et pas l'inverse
      ;; ("s" eaf-py-proxy-insert_or_save_as_bookmark "Sauvegarde marque page" :exit t)
  
  
      )
     "Opération"
     (
      ;; ("f" org-capture-finalize "Finir-capture" :exit t)
      ("R" lsp-rename "Renomer une variable" :exit t)
      ("p" sp-rewrap-sexp "changer les parenthèse par une autre" :exit t)
  
      ;; ("f" hydra-zoom/body "chedule (unedate)" :exit t)
  
      )
     "TODO"
     (
      ("o" org-agenda-open-link "Ouvre lien" :exit t)
      )
     "Autre"
     (
      ("a" agenda/tags/body "Agenda/tags" :exit t)
      ("q" keyboard-quit "quit" :color blue)
      )
     )
    )
  
  
  ;; touche perso pour eaf browser !!!!
  (defun eafconfiguration()
    (interactive)
    
  
  
  
    (define-key eaf-mode-map [remap avy-goto-char] #'eaf-py-proxy-open_link)
    (define-key eaf-mode-map [remap next-line] #'eaf-send-down-key)
    (define-key eaf-mode-map [remap previous-line] #'eaf-send-up-key)
    (define-key eaf-mode-map [remap \r] #'eaf-send-return-key)
    (define-key eaf-mode-map [remap xah-delete-backward-char-or-bracket-text] #'eaf-send-ctrl-delete-sequence)
  
  

    (define-key eaf-mode-map [remap undo] #'eaf-py-proxy-undo_action)
    (define-key eaf-mode-map [remap consult-line] #'eaf-py-proxy-search_text_forward)
    (define-key eaf-mode-map [remap xah-paste-or-paste-previous] #'eaf-py-proxy-yank_text)
  
  
  
  
    (define-key pdf-view-mode-map [remap previous-line] #'pdf-view-previous-line-or-previous-page)
  
  
    )
  
  (add-hook 'eaf-mode-hook #'eafconfiguration)
  
  
  
  ;; pour isearch avec les flèches
  (progn
    ;; set arrow keys in isearch. left/right is backward/forward, up/down is history. press Return to exit
    (define-key isearch-mode-map (kbd "<up>") 'isearch-ring-retreat )
    (define-key isearch-mode-map (kbd "<down>") 'isearch-ring-advance )
  
    (define-key isearch-mode-map (kbd "<left>") 'isearch-repeat-backward)
    (define-key isearch-mode-map (kbd "<right>") 'isearch-repeat-forward)
  
    (define-key minibuffer-local-isearch-map (kbd "<left>") 'isearch-reverse-exit-minibuffer)
    (define-key minibuffer-local-isearch-map (kbd "<right>") 'isearch-forward-exit-minibuffer))
  
  
  
#+end_src

** Programmation
  
*** Grandes choses
**** Language server (lsp)
***** Lsp mode

Lien pour configurer les différentes choses de LSP : [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][ici]]

       #+begin_src emacs-lisp
	 
	 
	 (defun efs/lsp-mode-setup ()
	 
	   ;; (sleep-for 3)
	 
	   ;; (lsp-enable-which-key-integration)
	 
	   ;; (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
	   ;;activer le chemin en haut
	   (lsp-headerline-breadcrumb-mode)
	   ;;	 activer la vue des fonctions dans le fichier
	   ;; (lsp-treemacs-symbols)
	   ;;activer la vue de treemacs du projet
	 
	   ;; (treemacs-display-current-project-exclusively)
	 
	   )
	 
	 
	 
	 (use-package lsp-mode
	   :commands (lsp lsp-deferred)
	   :init
	   ;; map lsp keymap prefix mais on prend l'autre version dans :config
	   ;; (setq lsp-keymap-prefix "C-é") 
	   :hook (
		  ;; mode qui active lsp
		  ((typescript-mode js2-mode web-mode c-mode python-mode) . lsp)
	 
		  ;; (lsp-mode . (treemacs-display-current-project-exclusively-mode lsp-enable-which-key-integration lsp-treemacs-symbols-mode))
	 
	 
		  ;; mode qui charge grâce à lsp
		  ;; (lsp-mode . yas-minor-mode-on)
		  (lsp-mode . efs/lsp-mode-setup)
		  (lsp-mode . lsp-enable-which-key-integration)
		  )
	   ;; :bind (:map lsp-mode-map
	   ;; ("TAB" . completion-at-point)
	   ;; )
	   :config
	   ;; pour mapper lsp-command-map
	   (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
	   ;;pour =activer les yasnippets dans company !!!!!!=
	   (setq lsp-completion-provider :none)
	 
	 
	 
	 
	   ;;pour les perf
	   (setq gc-cons-threshold 100000000)
	   (setq read-process-output-max (* 1024 1024)) ;; 1mb
	   (setq lsp-idle-delay 0.500)
	   (setq lsp-log-io nil) ; if set to true can cause a performance hit
	 
	 
	 
	 
	 
	 ;; les options, voir le lien au dessus
	 
	 
	   ;; (setq lsp-ui-doc-enable nil)
	   (setq lsp-ui-doc-show-with-cursor nil) ;; enlever le gros pavé qui se met à chaque fois

	 
	 ;; (setq lsp-ui-sideline-enable nil)
	   ;; (setq lsp-ui-sideline-enable nil)
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	   )
	 
	 
	 
 #+end_src
      
***** Lsp-ui (pour les infos qd curseur dessus)
	 #+begin_src emacs-lisp
 (use-package lsp-ui
   :hook (lsp-mode . lsp-ui-mode)
   :custom
   (lsp-ui-doc-position 'bottom))
	 #+end_src

***** Lsp-treemacs (pour les info dans un fichier)
	#+begin_src emacs-lisp
	  (use-package lsp-treemacs
	    :after lsp
	    :config
	    ;; pour syncro les dossier treemacs avec lsp
	  
	    ;;suis pour lsp
	    (lsp-treemacs-sync-mode 1)
	  
	  
	  
	    )
	  
	  
	  
	  
	#+end_src

***** EN ATTENTE Lsp-consult (pour rechercher dans tout le projet)
	#+begin_src emacs-lisp
	  
	  
	  (use-package consult-lsp
	    :config
	    (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols)
	  )
	  
	#+end_src
       
**** Dap-mode (pour le Debug)


***** Le moteur

     #+begin_src emacs-lisp 
       (use-package dap-mode
	 :after lsp
	 ;; Uncomment the config below if you want all UI panes to be hidden by default!
	 ;; :custom
	 ;; (lsp-enable-dap-auto-configure nil)
	 ;; :config
	 ;; (dap-ui-mode 1)
       
	 :config
	 ;; Set up Node debugging
	 (require 'dap-node)
	 (dap-node-setup) ;; Automatically installs Node debug adapter if needed
       
       
	 )
       
       
       
     #+end_src
       
     
***** Raccourcis sur "d"

#+begin_src emacs-lisp
       ;;	  pour le raccourcis, à voir
		(use-package general)
       
       
		(general-define-key
		 :keymaps 'lsp-mode-map
		 :prefix lsp-keymap-prefix
		 "d" '(dap-hydra t :wk "debugger"))
       
       
#+end_src

**** Language en + nouveau language    
     
***** C/C++

****** clang format

	  #+begin_src emacs-lisp
	    (use-package clang-format+
	      :ensure t)
	    
	    (add-hook 'c-mode-common-hook #'clang-format+-mode)
	    ;; (add-hook 'c-mode-common-hook
	    ;;           (lambda ()
	    ;;             (local-set-key (kbd "C-x <C-tab>") 'clang-format-region)))
	  #+end_src
	  
****** Le moteur
       #+begin_src emacs-lisp
	 (use-package ccls
	   :after lsp
	   :hook ((c-mode c++-mode objc-mode cuda-mode) .
		  (lambda () (require 'ccls) (lsp))))
       #+end_src
***** Python
****** Moteur
      #+begin_src emacs-lisp
	
	
	(setq python-shell-interpreter "/home/msi/anaconda3/bin/python3")
	
	(use-package python-mode
	  :config
	  ;; (setq python-shell-interpreter "python3")
	  ;; (setq python-shell-interpreter "ipython")
	  ;; (setq python-shell-interpreter-args "/home/msi/anaconda3/lib/python3.8/site-packages/bokeh/_testing/plugins/ipython.py") 
	  (require 'dap-python)
	
	     (add-to-list 'auto-mode-alist '("\\.rpy\\'" . python-mode))
	  )
	
	
	
	
	
	
	;; pour éviter les erreurs de doctstring	
	(setq lsp-pylsp-plugins-pydocstyle-enabled nil)
	
	
	
      #+end_src
****** Pyvenv

#+begin_src emacs-lisp 

(use-package pyvenv)

#+end_src

****** lsp pyright




#+begin_src emacs-lisp 
  
  ;; (use-package lsp-pyright
  ;;   :hook (python-mode . (lambda ()
  ;;                           (require 'lsp-pyright)
  ;;                           (lsp))))
					  ; or lsp-deferred
  
  
#+end_src



****** TODO auto formatage (marche sûrement sans anaconda)



pip install black

Il faut aussi faire ceci : 
https://github.com/wbolster/emacs-python-pytest#using-the-correct-environment

C'est long...


tuto pour direnv : [[https://rednet.io/2019-05-15-decouverte-de-direnv.html][ici]]


#+begin_src emacs-lisp 
  
  
  (use-package direnv
 :config
 (direnv-mode))
  
  (use-package python-black
    :after python
    :hook (python-mode . python-black-on-save-mode-enable-dwim))
  
  
  ;; rajoute le hook pour trouver black
  (add-hook 'python-mode-hook
	  (lambda ()
	    (when-let ((r (locate-dominating-file default-directory ".pyroot")))
	      (setq python-pytest-executable
		    (concat "PYTHONPATH=" r " " "pytest")))))
  
  
  
  
#+end_src

***** Typescript-mode
	 #+begin_src emacs-lisp
		    (use-package typescript-mode
		      :mode "\\.ts\\'"
		      :hook (typescript-mode . lsp-deferred)
		      :config
		      (setq typescript-indent-level 2)


	   ;; Set up Node debugging (pour dap-mode)
	   (require 'dap-node)
	   (dap-node-setup) ;; Automatically installs Node debug adapter if needed

		      )
	 #+end_src
	 
***** C#

****** server
#+begin_src emacs-lisp
  
     ;; (use-package omnisharp
     ;;   :hook ((csharp-mode . omnisharp-mode)
     ;; 	 (before-save . omnisharp-code-format-entire-file))
     ;;   :config
     ;;   (add-hook 'omnisharp-mode-hook (lambda()
     ;; 				   (add-to-list (make-local-variable 'company-backends)
     ;; 						'(company-omnisharp)))
     ;;   )
     ;; )
  
  
     (use-package omnisharp
       :config
       (add-hook 'csharp-mode 'omnisharp-mode)
       (eval-after-load
      'company
      '(add-to-list 'company-backends 'company-omnisharp))
  
       (add-hook 'csharp-mode-hook #'company-mode)
       (add-hook 'csharp-mode-hook #'flycheck-mode)
     )
  
  
    ;; (eval-after-load
   ;;   'company
   ;;   '(add-to-list 'company-backends #'company-omnisharp))
  
   (defun my-csharp-mode-setup ()
    (omnisharp-mode)
      (company-mode)
      (flycheck-mode)
  
   ;;   (setq indent-tabs-mode nil)
   ;;   (setq c-syntactic-indentation t)
   ;;   (c-set-style "ellemtel")
   ;;   (setq c-basic-offset 4)
   ;;   (setq truncate-lines t)
   ;;   (setq tab-width 4)
   ;;   (setq evil-shift-width 4)
  
   ;;   ;csharp-mode README.md recommends this too
   ;;   ;(electric-pair-mode 1)       ;; Emacs 24
   ;;   ;(electric-pair-local-mode 1) ;; Emacs 25
  
   ;;   (local-set-key (kbd "C-c r r") 'omnisharp-run-code-action-refactoring)
   ;;   (local-set-key (kbd "C-c C-c") 'recompile)
      (omnisharp-start-omnisharp-server))
  
  (add-hook 'csharp-mode-hook 'my-csharp-mode-setup t)
  
#+end_src

****** C# mode

#+begin_src emacs-lisp
(use-package csharp-mode)
#+end_src


***** Java


****** Le language server protocol
#+begin_src emacs-lisp 
  
  
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  
  
#+end_src



****** Pour lancer direct la commande

#+begin_src emacs-lisp 

(defun java-eval-nofocus ()
  "run current program (that requires no input)"
  (interactive)
  (let* ((source (file-name-nondirectory buffer-file-name))
     (out    (file-name-sans-extension source))
     (class  (concat out ".class")))
    (save-buffer)
    (shell-command (format "rm -f %s && javac %s" class source))
    (if (file-exists-p class)
    (shell-command (format "java %s" out) "*OutputJava*")
      (progn
    (set (make-local-variable 'compile-command)
         (format "javac %s" source))
    (command-execute 'compile)))))

#+end_src

*** Moyennes choses
**** Flycheck (correction du code)

***** Le moteur
       #+begin_src emacs-lisp
	 
	 (use-package flycheck
	   :defer t
	   :init
	   :diminish
	   :hook (lsp-mode . flycheck-mode)
	   :config
	   (global-flycheck-mode t)
	   (set-face-attribute 'flycheck-error nil :foreground "black" :background
			       "#EE4400")
	   (set-face-attribute 'flycheck-warning nil :foreground "black" :background
			       "#EE9900")
	   (set-face-attribute 'flycheck-info nil :foreground "black" :background
			       "#008800")
	   )
	 
       #+end_src


       
**** Company (pour la proposition de complétation)



***** ANNULÉ Company lsp =plus utilisé=
CLOSED: [2021-09-18 sam. 10:38]
:PROPERTIES:
:CREATED:  <2021-09-18 sam. 10:38>
:END:

#+begin_src emacs-lisp 
  
  ;; (use-package company-lsp		
  ;;   :config
  ;;   (require 'company-lsp)
  ;;   (push 'company-lsp company-backends)
  ;;   )
  
#+end_src

***** Le moteur


#+begin_src emacs-lisp
	 
	 (use-package company
	   :after lsp-mode  ;;si ya lsp-mode
	   :init
	   :hook (lsp-mode . company-mode)  ;; au lieu de lsp, mettre c-mode, python mode etc
	   :bind (:map company-active-map
		       ("<tab>" . company-complete-selection)) ;; logique pour complêter
	 
	   :custom
	   (company-minimum-prefix-length 2) ;;taille avant que le popup arrive
	   (company-idle-delay 0.6);;temps avant qu'il pop
	   ;;pour cycler dans les sélections
	   ( company-selection-wrap-around t)
	   :config
	 
	 
	 
	 
	 
	   ;; (add-hook 'company-mode
	   ;; (lambda ()
	   ;; (setq company-backends
	   ;; (mapcar #'mars/company-backend-with-yas company-backends))))
	 
	 
	 
	   )  
	 
	 
	 
	 (with-eval-after-load 'company
	 
	   ;; réglemeent des touches, assez explicite, sur azerty :
	   ;; k i s 
	   (define-key company-active-map (kbd "M-n") nil)
	   (define-key company-active-map (kbd "M-p") nil)
	   ;; (define-key company-active-map (kbd "s") #'company-select-next)
	   ;; (define-key company-active-map (kbd "d") #'company-select-previous)
	   (define-key company-active-map (kbd "C-s") #'company-select-next)
	   (define-key company-active-map (kbd "C-d") #'company-select-previous)
	   (define-key company-active-map (kbd "u") 'company-complete-selection)
	   (define-key company-active-map (kbd "SPC") #'company-abort)
	   	     (add-to-list 'company-backends 'company-capf)
	   )
	 
	 
	 
	 ;;pour l'estéthéque 
	 (use-package company-box
	   :after company
	   :hook (company-mode . company-box-mode))
	 
	 
	 
	 
	 
#+end_src



       
   
***** Precient(filters list candidates), candidats intelligent

#+begin_src emacs-lisp
  
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode 1)
    ;; Remember candidate frequencies across sessions
    (prescient-persist-mode 1)
    )
  
  
#+end_src



***** Yasnippets dans company


#+begin_src emacs-lisp
  
  
  (with-eval-after-load 'company
  
  
    ;; Add yasnippet support for all company backends
    ;; https://github.com/syl20bnr/spacemacs/pull/179
    (defvar company-mode/enable-yas t
      "Enable yasnippet for all backends.")
  
    (defun company-mode/backend-with-yas (backend)
      (if (or (not company-mode/enable-yas) (and (listp backend) (member 'company-yasnippet backend)))
	  backend
	(append (if (consp backend) backend (list backend))
		'(:with company-yasnippet))))
  
    (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  
  
    (defun activeryasnippets ()
      (interactive)
      (setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))
  
  
      )
  
  
  
    (global-set-key (kbd "<f6>") 'activeryasnippets)
  
  
    (add-hook 'company-mode
	      (lambda ()
		(setq company-backends (mapcar #'company-mode/backend-with-yas company-backends))))
  
  
  
    (add-hook #'company-select-next 'activeryasnippets)
  
    )

  	 
  
  
  
#+end_src

**** Projet (projectile) (affiche les fichiers)



  #+BEGIN_SRC emacs-lisp 
    
    
       (use-package projectile
       :config
       (use-package ripgrep);; pour projectile ripgrep, chercher dans un projet
       (projectile-global-mode)
       ;;(setq projectile-completion-system 'ivy)
       )
    
    
    
    
    ;;   (setq projectile-project-search-path '("~/projects/" "home/msi/Documents/Project/Code/"))
  #+END_SRC
 
**** Yasnippets
    
***** Le moteur
 #+begin_src emacs-lisp 
   
   
	 (use-package yasnippet
	   ;; si on veux les yas que en prog mode, décocher ça et cocher yas global mode
	   ;; :hook (prog-mode . yas-minor-mode)
	   :config
	   (yas-reload-all)
	   (yas-global-mode 1)
	   (setq yas-triggers-in-field t) ;;appeler des snippets dans des snippets
	   )
   
	 (use-package yasnippet-snippets ;; un pack de snippets
	   :diminish
	   )
   
	 (eval-after-load 'yasnippet
	   '(progn
      (global-unset-key (kbd "C-s"))
	      (define-key yas-keymap (kbd "TAB") nil)
	      ;; (define-key yas-keymap (kbd "C-s") 'yas-next-field)
	      (define-key yas-keymap (kbd "C-s") 'yas-next-field-or-maybe-expand)
	      ;; (key-chord-define  "ie" 'yas-next-field)
	      )
	   )
   
   
   
   
   ;;pour plus tard, si jamais la complétion plus tart
   ;;    (defun yas-org-very-safe-expand ()
   ;;      (interactive)
   ;;   (let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
   
   ;; (add-hook 'org-mode-hook
   ;;       (lambda ()
   ;; 	(add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
   ;; 	(define-key yas-keymap [tab] 'yas-next-field)))
   
   
   
   
   
   
	 ;; déjà au bon endroit :   /home/msi/.emacs.d/etc/yasnippet/snippets/
	 ;; (setq yas-snippet-dirs
	 ;;       '(
	 ;; 	"/home/msi/.emacs.d/etc/yasnippet/snippets/"
	 ;; 	"yasnippet-snippets-dir"
	 ;; 	))
   
   
   
   
 #+end_src


 
***** Raccourcis sur C-tab
     #+begin_src emacs-lisp
       
       (define-key yas-minor-mode-map (kbd "<tab>") nil)
       (define-key yas-minor-mode-map (kbd "TAB") nil)
       (define-key yas-minor-mode-map (kbd "<C-tab>") 'yas-expand)
       
       ;; (define-key yas-minor-mode-map (kbd "SPC") 'yas-maybe-expand)
     #+end_src


     



***** (à mettre après company dans config.org)Activer les yasnippets pour lsp-mode
  #+begin_src emacs-lisp
    
    ;; (company-mode)
    
    
    
    
    ;; Fait, et trop fort
    ;; à faire

    
    
    
    
    
#+end_src

***** PEUT-ÊTRE EN ATTENTE Helm c
:PROPERTIES:
:CREATED:  <2021-09-11 sam. 14:14>
:END:
#+begin_src emacs-lisp
	  
;;	    (use-package helm-c-yasnippet
;;	      :config
;;	      (setq helm-yas-space-match-any-greedy t)
;;	    (global-set-key (kbd "C-<tab>") 'helm-yas-complete))


#+end_src

**** Doxygen (pour commenter le code en C et C++)

***** Pour les couleurs
#+begin_src emacs-lisp 
  
  (use-package highlight-doxygen
    :config
    (highlight-doxygen-global-mode 1)
    )
  
#+end_src


***** Pour générer le code

#+begin_src emacs-lisp 
  
  (use-package doxygen)
  
#+end_src


***** Doxymacs

#+begin_src emacs-lisp 
  
  ;; (use-package doxymacs)
  
#+end_src

**** Indend mode, peut servir pour les autres languages de programmation (que java pour l'instant)


#+begin_src emacs-lisp 
  
  (use-package aggressive-indent
    :config
    ;; (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'java-mode-hook #'aggressive-indent-mode)
    )
  
#+end_src

*** Petites choses
**** Parenthèses
***** Smartparens (parenthèse et <> autres auto), pour la *prog* , pour modifier pair de parenthèse


Doc : https://github.com/Fuco1/smartparens et [[https://smartparens.readthedocs.io/en/latest/ ][ici]]




#+begin_src emacs-lisp
  
  
  (use-package smartparens
    :hook ((lsp-mode org-mode) . smartparens-mode)
  
    :config
  
  (sp-pair "\«" "\»")
  
    ;;pour enlever un truc
    ;; the second argument is the closing delimiter, so you need to skip it with nil
    (sp-pair "'" nil :actions :rem)
  
    ;; pour rajouter à un mode :
    ;; (sp-local-pair 'org-mode "*" "*") ;; adds `' as a local pair in emacs-lisp-mode
  
  
  
    )
  
  
  
  
  
#+end_src






***** Paires automatiques =pas prog=, pour org mode (emphasis), mettre en gras surligné etc



      #+begin_src emacs-lisp
	
	(setq electric-pair-pairs '(
	
				    (?\( . ?\))
				    (?\{ . ?\{)
				    (?\[ . ?\])
	
				    (?\* . ?\*)
				    (?\= . ?\=)
				    (?\/ . ?\/)
				    (?\" . ?\")
				    (?\~ . ?\~)
				    (?\$ . ?\$)
				    ))
	
	
	
	
	
	;;pour ne pas avoir <> mais juste le début
	(setq electric-pair-inhibit-predicate
	      (lambda (c)
		(if (char-equal c ?\<) t (electric-pair-default-inhibit c))))
	
	;; (electric-pair-mode t)
	
	(add-hook 'org-mode-hook 'electric-pair-local-mode)
	;; (add-hook 'lsp-mode-hook 'electric-pair-local-mode)
	

	
	
	
      #+end_src

      
***** Parenthèses mise en valeur avec sa moitié

Style used when showing a matching paren.
Valid styles are ‘parenthesis’ (meaning show the matching paren),
‘expression’ (meaning show the entire expression enclosed by the paren) and
‘mixed’ (meaning show the matching paren if it is visible, and the expression
otherwise).

      #+begin_src emacs-lisp 
	(show-paren-mode 1)
	;; (setq show-paren-style 'parenthesis)
	(setq show-paren-style 'mixed)
	
	;; couleur
	(set-face-background 'show-paren-match "gray")
	(set-face-foreground 'show-paren-match "black")
	(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
	
	
      #+end_src
***** Parenthèse en couleur
 #+begin_src emacs-lisp 
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
 #+end_src
**** Effacement glouton, efface les tab, remplacer par smart-hungry-delete
 #+BEGIN_SRC emacs-lisp 
 (use-package hungry-delete
   :ensure t
   :config
     (global-hungry-delete-mode)
   :diminish)
 #+END_SRC


****  f10 Pour compiler et affiche nottif
***** nottification qd fini de compiler
   #+begin_src emacs-lisp 

   (setq compilation-finish-functions
	 (append compilation-finish-functions
             '(fmq-compilation-finish)))

   (defun fmq-compilation-finish (buffer status)
     (when (not (member mode-name '("Grep" "rg")))
       (call-process "notify-send" nil nil nil
             "-t" "0"
             "-i" "emacs"
             "Compilation finished in Emacs"
             status)))
   #+end_src


***** f10
	   #+begin_src emacs-lisp
	     
	     ;;pour compiler et run directement le makefile	     
			  (defun desperately-compile ()
			    "Traveling up the path, find a Makefile and `compile'."
			    (interactive)
			    (when (locate-dominating-file default-directory "Makefile")
			      (with-temp-buffer
				(cd (locate-dominating-file default-directory "Makefile"))
				(compile "make run"))))
	     
			  (global-set-key [f10] 'desperately-compile)
	     
	   #+end_src


**** Shell avec F9 et shell popup
	#+begin_src emacs-lisp
		    (defun run-buffer()
		      (interactive)
		      (shell-pop)
		      )
		    ;; (global-set-key (kbd "<f9>") 'run-buffer)
	  
	  
	  (use-package shell-pop)
	  
	  
	#+end_src

       

       
**** Affiche les numéros de lignes qd on programme
#+begin_src emacs-lisp
   (add-hook 'prog-mode-hook #'linum-mode) 
#+end_src
**** Go-mode activer

#+begin_src emacs-lisp
(use-package go-mode)
#+end_src
**** Origami (plier le code)

#+begin_src emacs-lisp
(use-package origami)
#+end_src
**** fenêtre de Compilation dans une autre fenetre

#+begin_src emacs-lisp 

(setq compilation-window-height 15)

(defun ct/create-proper-compilation-window ()
  "Setup the *compilation* window with custom settings."
  (when (not (get-buffer-window "*compilation*"))
    (save-selected-window
      (save-excursion
        (let* ((w (split-window-vertically))
               (h (window-height w)))
          (select-window w)
          (switch-to-buffer "*compilation*")

          ;; Reduce window height
          (shrink-window (- h compilation-window-height))

          ;; Prevent other buffers from displaying inside
          (set-window-dedicated-p w t) 
  )))))
(add-hook 'compilation-mode-hook 'ct/create-proper-compilation-window)


#+end_src

** Mails

[[https://github.com/howardabrams/dot-files/blob/master/emacs-mail.org][lien sympas pour de la docs ?]]


*** Principal, pour voir les mails,
#+begin_src emacs-lisp
  
;;  (setq mu4e-mu-binary "/home/msi/mu/mu")

  
  	;;   ;; :defer 20 ; Wait until 20 seconds after startup
	;;   :config
     (require 'mu4e)
	   ;; This is set to 't' to avoid mail syncing issues when using mbsync
	   (setq mu4e-change-filenames-when-moving t)
    
	   ;; Refresh mail using isync every 10 minutes
	   (setq mu4e-update-interval (* 10 60))
	   (setq mu4e-get-mail-command "mbsync -a")
	   (setq mu4e-maildir "~/Mail")
    
	   (setq mu4e-drafts-folder "/[Gmail]/Drafts")
	   (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
	   (setq mu4e-refile-folder "/[Gmail]/All Mail")
	   (setq mu4e-trash-folder  "/[Gmail]/Trash")
    
	   (setq mu4e-maildir-shortcuts
	       '(("/Inbox"             . ?i)
	    ("/[Gmail]/Sent Mail" . ?s)
	    ("/[Gmail]/Trash"     . ?t)
	    ("/[Gmail]/Drafts"    . ?d)
	    ("/[Gmail]/All Mail"  . ?a)))
    ;;)
#+end_src

Marche, mais pour la 26.3

  
  


(require 'mu4e)

  (require 'mu4e)  
  
  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)
  
  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")
  
  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")
  
  (setq mu4e-maildir-shortcuts
	'(("/Inbox"             . ?i)
	  ("/[Gmail]/Sent Mail" . ?s)
	  ("/[Gmail]/Trash"     . ?t)
		("/[Gmail]/Drafts"    . ?d)
		("/[Gmail]/All Mail"  . ?a)))


    
    
 
*** Pour envoyer des mails

#+begin_src emacs-lisp
  (setq smtpmail-smtp-server "smtp.gmail.com"
	smtpmail-smtp-service 465
	smtpmail-stream-type  'ssl)
  
  
  ;; Configure the function to use for sending mail
(setq message-send-mail-function 'smtpmail-send-it)
#+end_src

*** TODO Alert lors de nouveaux mess



    (setq dw/mu4e-inbox-query
	"(maildir:/Personal/Inbox OR maildir:/Fastmail/INBOX) AND flag:unread")
    
  
  
  (use-package mu4e-alert
    :after mu4e
    :config
    ;; Show unread emails from all inboxes
    (setq mu4e-alert-interesting-mail-query dw/mu4e-inbox-query)
  
    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)
  
    (mu4e-alert-enable-notifications))

    
** Textes

*** Les lignes reviennent à la ligne

#+begin_src emacs-lisp 

  (auto-fill-mode 0)
  (visual-line-mode 1)

#+end_src

*** Tailles des interlignes

merci encore à xah, [[http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html][site de la fonction]]
  
#+begin_src emacs-lisp
  
  (defun taille-interligne ()
    "Toggle line spacing between no extra space to extra half line height.
  URL `http://ergoemacs.org/emacs/emacs_toggle_line_spacing.html'
  Version 2017-06-02"
    (interactive)
    (if line-spacing
	(setq line-spacing nil)
      (setq line-spacing 0.5))
    (redraw-frame (selected-frame)))
  
#+end_src

*** Concentration avec Darkroom
#+BEGIN_SRC emacs-lisp

  (use-package darkroom
    :hook (org-mode . darkroom-tentative-mode)
    :commands darkroom-mode
    :config
    (setq darkroom-text-scale-increase 0)
    )



  ;;pour que les fonction marche du 1er coup, activé désactivé.
  (darkroom-mode 1)
  (darkroom-mode 0)

  (defun dw/enter-focus-mode ()

    (darkroom-mode 1)
    (menu-bar-mode 0)
    (scroll-bar-mode 0 )
    (toggle-frame-fullscreen)
    )

  (defun dw/leave-focus-mode ()

    (darkroom-mode 0)
    ;; (menu-bar-mode 1)
    (scroll-bar-mode 1 )
    (toggle-frame-fullscreen)
    )

  (defun dw/toggle-focus-mode ()
    (interactive)
    (if (symbol-value darkroom-mode)
	(dw/leave-focus-mode)
      (dw/enter-focus-mode)))

  ;; (add-hook 'org-mode-hook #'dw/toggle-focus-modebis)
#+END_SRC





*** C-c f pour mot, C-c d pour changer langue Correcteur orthographique. 
**** Le moteur
 #+BEGIN_SRC emacs-lisp 
(setq ispell-local-dictionary-alist- 
      '(("francais" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "fr") nil utf-8)
        ("en_US" "[[:alpha:]]" "[^[:alpha:]]" "[']" nil ("-d" "en_US") nil utf-8)
        ))
(setq ispell-program-name "hunspell"          ; Use hunspell to correct mistakes
      ispell-dictionary   "francais")
 #+END_SRC
**** Switch de dico (C-c d)
#+BEGIN_SRC emacs-lisp 
(defun switch-dictionary-fr-en ()
  "Switch french and english dictionaries."
  (interactive)
  (let* ((dict ispell-current-dictionary)
         (new (if (string= dict "francais") "en_US"
                   "francais")))
    (ispell-change-dictionary new)
    (message "Switched dictionary from %s to %s" dict new)))

(global-set-key (kbd "C-c d") 'switch-dictionary-fr-en)
#+END_SRC
**** Correction à la volée
#+BEGIN_SRC emacs-lisp 
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode) ;; if you write text with a
  ;; lot of text, it is possible to activte it, the problem is that it suggests errors
  ;; when you put code inside ""
  (global-set-key (kbd "C-c f") 'flyspell-check-previous-highlighted-word)
  
  ;;-------------
  ;; Text mode
  ;;-------------
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  
  ;; Highlight BUG FIXME TODO NOTE keywords in the source code.
  (add-hook 'find-file-hook
	    (lambda()
	      (highlight-phrase "\\(BUG\\|FIXME\\|TODO\\|NOTE\\):")))
  
#+END_SRC
*** Correcteur grammaire fr 

#+begin_src emacs-lisp

  (use-package flycheck-grammalecte
    :after flycheck
    :init
    (setq
     ;; pas de faute avec les '
     flycheck-grammalecte-report-apos nil
     ;; pas de faute avec les espaces insécable
     flycheck-grammalecte-report-nbsp nil
     ;; pas de faute avec pleins d'espaces et de tab
     flycheck-grammalecte-report-esp nil)
    :config

    ;;à faire pour enlever l'erreur des tirés
    ;; pour enlever l'erreur des des begin_src etc
    (setq flycheck-grammalecte-filters-by-mode
	  '(
	    (org-mode "(?ims)^[ \t]*#\\+begin_src.+#\\+end_src"
		      "(?im)^[ \t]*#\\+begin[_:].+$"
		      "(?im)^[ \t]*#\\+end[_:].+$"
		      "(?m)^[ \t]*(?:DEADLINE|SCHEDULED):.+$"
		      "(?m)^\\*+ .*[ \t]*(:[\\w:@]+:)[ \t]*$"
		      "(?im)^[ \t]*#\\+(?:caption|description|keywords|(?:sub)?title):"
		      "(?im)^[ \t]*#\\+(?!caption|description|keywords|(?:sub)?title)\\w+:.*$"
		      "(?ims)^\- $"
		      ))
	  )


    (grammalecte-download-grammalecte)
    (flycheck-grammalecte-setup)
    ) 







#+end_src


*** TODO Correcteur grammaire anglais
:PROPERTIES:
:CREATED:  <2021-10-06 mer. 14:27>
:END:
**** Correcteur grammaire anglais
***** Flyspell
#+BEGIN_SRC emacs-lisp 
;;And we can also avoid loading them in any other specific text-mode, for example change-log-mode and log-edit-mode:

(dolist (hook '(change-log-mode-hook log-edit-mode-hook))
    (add-hook hook (lambda () (flyspell-mode -1))))

#+END_SRC

***** Langtool
 
(setq langtool-language-tool-jar "/snap/languagetool/27/usr/bin/languagetool-commandline.jar")
(require 'langtool)

(global-set-key "\C-x4w" 'langtool-check)
(global-set-key "\C-x4W" 'langtool-check-done)
(global-set-key "\C-x4l" 'langtool-switch-default-language)
(global-set-key "\C-x44" 'langtool-show-message-at-point)
(global-set-key "\C-x4c" 'langtool-correct-buffer)

(setq langtool-default-language "en")







*** Lire des epub

#+begin_src emacs-lisp
  
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
  
#+end_src



*** TODO Traducteur :
      
**** TODO Google trad(marche pas à faire)
#+begin_src emacs-lisp
  ;; (use-package go-translate
  ;;   :config
  ;;   (setq go-translate-local-language "fr")
  ;;   (setq go-translate-target-language "en")
  ;;   (global-set-key "\C-ct" 'go-translate)
  ;;   (global-set-key "\C-cT" 'go-translate-popup))
  
#+end_src



** Git/Github(Magit)

***** Le moteur

#+begin_src emacs-lisp
	    
	    (use-package magit
	      :bind ("C-x g" . magit-status)
	      :custom
	      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
	      )
	    
#+end_src


     
***** TODO Git gutter, rajoutes des plus et des moins dans les lignes d'un fichier

(use-package git-gutter
:config
;; (global-git-gutter-mode 1)
)

#+begin_src emacs-lisp 



#+end_src

***** TODO Pour voir comment le fichier était dans tel commit

(use-package git-timemachine)

#+begin_src emacs-lisp 



#+end_src

***** TODO fetch tous les repos ([[https://emacs.stackexchange.com/questions/33616/magit-fetch-all-repos-from-github][ici]])
:PROPERTIES:
:CREATED:  <2021-09-08 mer. 21:43>
:END:
***** TODO Raccourcis(à faire ?)
      #+begin_src emacs-lisp
	     ;;  (defun dw/leader-key-def()
	;; (interactive)
	;; 	"g"   '(:ignore t :which-key "git")
	;; 	"gs"  'magit-status
	;; 	"gd"  'magit-diff-unstaged
	;; 	"gc"  'magit-branch-or-checkout
	;; 	"gl"   '(:ignore t :which-key "log")
	;; 	"glc" 'magit-log-current
	;; 	"glf" 'magit-log-buffer-file
	;; 	"gb"  'magit-branch
	;; 	"gP"  'magit-push-current
	;; 	"gp"  'magit-pull-branch
	;; 	"gf"  'magit-fetch
	;; 	"gF"  'magit-fetch-all
	;; 	"gr"  'magit-rebase)
      #+end_src





** ANNULÉ Syncronisation avec google calendar , =ancienne version=!
CLOSED: [2021-10-17 dim. 14:55]


https://cestlaz.github.io/posts/using-emacs-26-gcal/

#+begin_src emacs-lisp :tangle no
  (setq package-check-signature nil)
  
  
  (use-package org-gcal
    :config
    (setq org-gcal-client-id "the id"
	  org-gcal-client-secret "the secret"
	  org-gcal-file-alist '(("payard.clement63@gmail.com" .  "/home/msi/Notes/Roam/2GcalTickler.org")
				;;("payard.clement63@gmail.com" .  "/home/msi/Notes/Roam/4GTD.org")
				))
    )
  
  
  
  
  ;;  I use these two hooks to sync things semi-automatically. The first hook syncs whenever I load the agenda. Since this happens in the background, if I just added something to my calendar, I might have to reload the agenda by hitting r in the agenda view.
  
  ;; The second hook syncs with my Google calendar when I capture. 
  
  (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
  ;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-post-at-point) ))
  ;;    (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))  
  
  ;; (org-gcal-sync) 			;;syncronisation au démarrage d'emacs(pas compatible avec Orgzly?)
  
  
#+end_src 








** Pour streamer lul
*** Keycast (voir les commandes tapées)(keycast log buffer)

#+begin_src emacs-lisp
(use-package keycast)
#+end_src
* Test

** Anglais
*** Config pour la cover letter

Pour enlever les traits sur les côtés:
[[https://mirrors.chevalier.io/CTAN/macros/latex/contrib/koma-script/doc/scrguien.pdf][ici, page 187]]

[[https://framabook.org/docs/komascript/KOMAScript_Framaboook_LPPL.pdf][ici, en français]]

#+begin_src emacs-lisp 
  
  
  (eval-after-load 'ox '(require 'ox-koma-letter))
  
   ;; KOMA-SCript letter
    (eval-after-load 'ox-koma-letter
      '(progn
	 (add-to-list 'org-latex-classes
		      '("my-koma-letter"
			"\\documentclass\{scrlttr2\}
  \\usepackage[hidelinks,unicode]{hyperref}
  [NO-DEFAULT-PACKAGES]"))
  
	 (setq org-koma-letter-default-class "my-koma-letter")))
  
  
  
#+end_src

*** Config pour cv anglais CV 

**** Pour ex latex



#+begin_src emacs-lisp 
  
  (require 'ox-latex)
  
  
  (setq org-latex-pdf-process
	  '("pdflatex -interaction nonstopmode -output-directory %o %f"
	    "bibtex %b"
	    "pdflatex -interaction nonstopmode -output-directory %o %f"
	    "pdflatex -interaction nonstopmode -output-directory %o %f"))
  
    (setq org-latex-with-hyperref nil) ;; stop org adding hypersetup{author..} to latex export
    ;; (setq org-latex-prefer-user-labels t)
  
    ;; deleted unwanted file extensions after latexMK
    (setq org-latex-logfiles-extensions
	  (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf" "acn" "acr" "alg" "glg" "gls" "ist")))
  
    ;; (unless (boundp 'org-latex-classes)
    ;;   (setq org-latex-classes nil))
  
#+end_src

**** Pour la classe latex

#+begin_src emacs-lisp 


#+end_src

**** Tag ingnore

#+begin_src emacs-lisp 

(require 'ox)
(eval-when-compile (require 'cl))

(defun org-latex-header-blocks-filter (backend)
  (when (org-export-derived-backend-p backend 'latex)
    (let ((positions
	   (org-element-map (org-element-parse-buffer 'greater-element nil) 'export-block
	     (lambda (block)
	       (when (and (string= (org-element-property :type block) "LATEX")
			  (string= (org-export-read-attribute
				    :header block :header)
				   "yes"))
		 (list (org-element-property :begin block)
		       (org-element-property :end block)
		       (org-element-property :post-affiliated block)))))))
      (mapc (lambda (pos)
	      (goto-char (nth 2 pos))
	      (destructuring-bind
		  (beg end &rest ignore)
		  (org-edit-src-find-region-and-lang)
		(let ((contents-lines (split-string
				       (buffer-substring-no-properties beg end)
				       "\n")))
		  (delete-region (nth 0 pos) (nth 1 pos))
		  (dolist (line contents-lines)
		    (insert (concat "#+latex_header: "
				    (replace-regexp-in-string "\\` *" "" line)
				    "\n"))))))
	    ;; go in reverse, to avoid wrecking the numeric positions
	    ;; earlier in the file
	    (reverse positions)))))


;; During export headlines which have the "ignore" tag are removed
;; from the parse tree.  Their contents are retained (leading to a
;; possibly invalid parse tree, which nevertheless appears to function
;; correctly with most export backends) all children headlines are
;; retained and are promoted to the level of the ignored parent
;; headline.
;;
;; This makes it possible to add structure to the original Org-mode
;; document which does not effect the exported version, such as in the
;; following examples.
;;
;; Wrapping an abstract in a headline
;;
;;     * Abstract                        :ignore:
;;     #+LaTeX: \begin{abstract}
;;     #+HTML: <div id="abstract">
;;
;;     ...
;;
;;     #+HTML: </div>
;;     #+LaTeX: \end{abstract}
;;
;; Placing References under a headline (using ox-bibtex in contrib)
;;
;;     * References                     :ignore:
;;     #+BIBLIOGRAPHY: dissertation plain
;;
;; Inserting an appendix for LaTeX using the appendix package.
;;
;;     * Appendix                       :ignore:
;;     #+LaTeX: \begin{appendices}
;;     ** Reproduction
;;     ...
;;     ** Definitions
;;     #+LaTeX: \end{appendices}
;;
(defun org-export-ignore-headlines (data backend info)
  "Remove headlines tagged \"ignore\" retaining contents and promoting children.
Each headline tagged \"ignore\" will be removed retaining its
contents and promoting any children headlines to the level of the
parent."
  (org-element-map data 'headline
    (lambda (object)
      (when (member "ignore" (org-element-property :tags object))
        (let ((level-top (org-element-property :level object))
              level-diff)
          (mapc (lambda (el)
                  ;; recursively promote all nested headlines
                  (org-element-map el 'headline
                    (lambda (el)
                      (when (equal 'headline (org-element-type el))
                        (unless level-diff
                          (setq level-diff (- (org-element-property :level el)
                                              level-top)))
                        (org-element-put-property el
                          :level (- (org-element-property :level el)
                                    level-diff)))))
                  ;; insert back into parse tree
                  (org-element-insert-before el object))
                (org-element-contents object)))
        (org-element-extract-element object)))
    info nil)
  data)

(defconst ox-extras
  '((latex-header-blocks org-latex-header-blocks-filter org-export-before-parsing-hook)
    (ignore-headlines org-export-ignore-headlines org-export-filter-parse-tree-functions))
  "A list of org export extras that can be enabled.
Should be a list of items of the form (NAME FN HOOK).  NAME is a
symbol, which can be passed to `ox-extras-activate'.  FN is a
function which will be added to HOOK.")

(defun ox-extras-activate (extras)
  "Activate certain org export extras.
EXTRAS should be a list of extras (defined in `ox-extras') which
should be activated."
  (dolist (extra extras)
    (let* ((lst (assq extra ox-extras))
	   (fn (nth 1 lst))
	   (hook (nth 2 lst)))
      (when (and fn hook)
	(add-hook hook fn)))))

(defun ox-extras-deactivate (extras)
  "Deactivate certain org export extras.
This function is the opposite of `ox-extras-activate'.  EXTRAS
should be a list of extras (defined in `ox-extras') which should
be activated."
  (dolist (extra extras)
    (let* ((lst (assq extra ox-extras))
	   (fn (nth 1 lst))
	   (hook (nth 2 lst)))
      (when (and fn hook)
	(remove-hook hook fn)))))


(ox-extras-activate '(latex-header-blocks ignore-headlines))

#+end_src

**** TODO de base
:PROPERTIES:
:CREATED:  <2021-10-08 ven. 09:19>
:END:

#+BEGIN_SRC emacs-lisp :exports none  :results none :eval always
  (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "xmpi" "run.xml" "bcf")))
  (add-to-list 'org-latex-classes
	       '("altacv" "\\documentclass[10pt,a4paper,ragged2e,withhyper]{altacv}
  
  % Change the page layout if you need to
  \\geometry{left=1.25cm,right=1.25cm,top=1.5cm,bottom=1.5cm,columnsep=1.2cm}
  
  % Use roboto and lato for fonts
  \\renewcommand{\\familydefault}{\\sfdefault}
  
  % Change the colours if you want to
  \\definecolor{SlateGrey}{HTML}{2E2E2E}
  \\definecolor{LightGrey}{HTML}{666666}
  \\definecolor{DarkPastelRed}{HTML}{450808}
  \\definecolor{PastelRed}{HTML}{8F0D0D}
  \\definecolor{GoldenEarth}{HTML}{E7D192}
  \\colorlet{name}{black}
  \\colorlet{tagline}{PastelRed}
  \\colorlet{heading}{DarkPastelRed}
  \\colorlet{headingrule}{GoldenEarth}
  \\colorlet{subheading}{PastelRed}
  \\colorlet{accent}{PastelRed}
  \\colorlet{emphasis}{SlateGrey}
  \\colorlet{body}{LightGrey}
  
  % Change some fonts, if necessary
  \\renewcommand{\\namefont}{\\Huge\\rmfamily\\bfseries}
  \\renewcommand{\\personalinfofont}{\\footnotesize}
  \\renewcommand{\\cvsectionfont}{\\LARGE\\rmfamily\\bfseries}
  \\renewcommand{\\cvsubsectionfont}{\\large\\bfseries}
  
  % Change the bullets for itemize and rating marker
  % for \cvskill if you want to
  \\renewcommand{\\itemmarker}{{\\small\\textbullet}}
  \\renewcommand{\\ratingmarker}{\\faCircle}
  "
  
		 ("\\cvsection{%s}" . "\\cvsection*{%s}")
		 ("\\cvevent{%s}" . "\\cvevent*{%s}")))
  (setq org-latex-packages-alist 'nil)
  (setq org-latex-default-packages-alist
	'(("rm" "roboto"  t)
	  ("defaultsans" "lato" t)
	  ("" "paracol" t)
	  ;; pour la cover letter
	  ("AUTO" "babel" t)
	  ))
#+END_SRC

** TODO prendre des notes rapidement (org-popup)

** EXWM pour run seulement dans emacs ? [[https://www.youtube.com/watch?v=f7xB2fFk1tQ][ici pour le fabuleux tuto nn fait]]


*** Le moteur
#+begin_src emacs-lisp
  
	  (defun efs/exwm-update-class ()
	  (exwm-workspace-rename-buffer exwm-class-name))
  
	(use-package exwm
	  :config
  
  
    ;; Set the default number of workspaces
    (setq exwm-workspace-number 5)
  
    ;; When window "class" updates, use it to set the buffer name
    ;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)
  
    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
	?\C-u
	?\C-h
	?\M-x
	?\M-`
	?\M-&
	?\M-:
	?\C-\M-j  ;; Buffer list
	?\C-\ ))  ;; Ctrl+Space
  
    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)
  
    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
	  `(
	    ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)
  
	    ;; Move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)
  
	    ;; Launch applications via shell command
	    ;; ([?\s-&] . (lambda (command)
	    ;; 	       (interactive (list (read-shell-command "$ ")))
	    ;; 	       (start-process-shell-command command nil 
						      ;; command)))
  
	    ;; Switch workspace
	    ([?\s-w] . exwm-workspace-switch)
  
	    ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))
  
  
  
  
    ;; Remap mes touches pour exwm     ;; Rebind CapsLock to Ctrl
    ;; (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")
  
      ;;(exwm-enable)
  
  
    ;; Show battery status in the mode line
  (display-battery-mode 1)
  
  ;; Show the time and date in modeline
  (setq display-time-day-and-date t)
  (display-time-mode 1)
  ;; Also take a look at display-time-format and format-time-string
  
  
	  )
  
#+end_src



*** Counsel, pour lancer les appli 

#+begin_src emacs-lisp 
  
  ;; (use-package counsel
  ;;   :demand t
  ;;   :bind (
  ;; 	 ;; ("M-x" . counsel-M-x)
  ;; 	 ("C-x b" . counsel-ibuffer)
  ;; 	 ;; ("C-x C-f" . counsel-find-file)
  ;; 	 ;; ("C-M-j" . counsel-switch-buffer)
  ;; 	 ("C-M-l" . counsel-imenu)
  ;; 	 :map minibuffer-local-map
  ;; 	 ("C-r" . 'counsel-minibuffer-history)
  ;; 	 )
  ;;   :custom
  ;;   ;; cette ligne notamment
  ;;   (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  ;;   :config
  ;;   (setq ivy-initial-inputs-alist nil)
  ;;   )
  
  
#+end_src

*** pour utiliser augmenter son lumière etc
Dépendance :

#+begin_src sh
sudo apt install scrot brightnessctl playerctl
#+end_src

#+begin_src emacs-lisp 
  
  
  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-")
    )
  
  
  
#+end_src



*** Pour firefox

#+begin_src emacs-lisp 
	  
	(with-eval-after-load 'exwm
    
    (use-package exwm-firefox-core)

			 )
	
	  
#+end_src

** TODO Lispy (pour écrire en lisp) [[https://github.com/abo-abo/lispy][ici]] ?

** xah fly elisp mode
Documentation : 
http://ergoemacs.org/emacs/xah-elisp-mode.html


Liste des abbrev : M-x list-abbrevs


#+begin_src emacs-lisp
(use-package xah-elisp-mode)
#+end_src


** IRC (pour parler avec le protocol irc) (erc) 

#+begin_src emacs-lisp

(setq erc-server "irc.libera.chat"
      erc-nick "Cletip"    ; Change this!
      erc-user-full-name "Cletip"  ; And this!
      erc-track-shorten-start 8
;;      erc-autojoin-channels-alist '(("irc.libera.chat" "#systemcrafters" "#emacs"))
      erc-kill-buffer-on-part t
            erc-auto-query 'bury)
#+end_src

** TODO Keepass-mode [[https://github.com/ifosch/keepass-mode][ici]]

(use-package keepass-mode)

#+begin_src emacs-lisp

#+end_src


** TODO Traducteur qui marche


** Hugo (pour export page web)

https://niklasfasching.github.io/go-org/#lists.org

#+begin_src emacs-lisp
  
  (use-package ox-hugo
    :after ox
    :config
    (setq org-hugo-base-dir
  
	  ;; "/home/msi/Documents/Projet/Git/Github/Siterecettes/"
  
	  "/home/msi/Documents/Projet/SitesWeb/braindump"
	  )
    )
  
#+end_src


** TODO Mini map

#+begin_src emacs-lisp
  
  (use-package minimap
  
    ;; :config
    ;; (minimap-mode 1)
  
    )  
  
#+end_src


** Présentation avec org mode

#+begin_src emacs-lisp
    
    
  ;; (defun dw/org-present-prepare-slide ()
  ;;   (org-overview)
  ;;   (org-show-entry)
  ;;   (org-show-children))
  
  ;; (defun dw/org-present-hook ()
  ;;   (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
  ;;                                      (header-line (:height 4.5) variable-pitch)
  ;;                                      (org-code (:height 1.55) org-code)
  ;;                                      (org-verbatim (:height 1.55) org-verbatim)
  ;;                                      (org-block (:height 1.25) org-block)
  ;;                                      (org-block-begin-line (:height 0.7) org-block)))
  ;;   (setq header-line-format " ")
  ;;   (org-display-inline-images)
  ;;   (dw/org-present-prepare-slide))
  
  ;; (defun dw/org-present-quit-hook ()
  ;;   (setq-local face-remapping-alist '((default variable-pitch default)))
  ;;   (setq header-line-format nil)
  ;;   (org-present-small)
  ;;   (org-remove-inline-images))
  
  ;; (defun dw/org-present-prev ()
  ;;   (interactive)
  ;;   (org-present-prev)
  ;;   (dw/org-present-prepare-slide))
  
  ;; (defun dw/org-present-next ()
  ;;   (interactive)
  ;;   (org-present-next)

  ;;   (dw/org-present-prepare-slide))
  
  (use-package org-present
    :bind (:map org-present-mode-keymap
	   ("C-c C-j" . dw/org-present-next)
	   ("C-c C-k" . dw/org-present-prev))
    :hook ((org-present-mode . dw/org-present-hook)
	   (org-present-mode-quit . dw/org-present-quit-hook)))
    
#+end_src



** Lsp pour org-src =fait bugger emacs != avant ?
:PROPERTIES:
:CREATED:  <2021-09-16 jeu. 23:21>
:END:


    #+begin_src emacs-lisp 
      
      (cl-defmacro lsp-org-babel-enable (lang)
	"Support LANG in org source code block."
	(setq centaur-lsp 'lsp-mode)
	(cl-check-type lang stringp)
	(let* ((edit-pre (intern (format "org-babel-edit-prep:%s" lang)))
	      (intern-pre (intern (format "lsp--%s" (symbol-name edit-pre)))))
	  `(progn
	     (defun ,intern-pre (info)
	      (let ((file-name (->> info caddr (alist-get :file))))
		(unless file-name
		  (setq file-name (make-temp-file "babel-lsp-")))
		(setq buffer-file-name file-name)
		(lsp-deferred)))
	     (put ',intern-pre 'function-documentation
		 (format "Enable lsp-mode in the buffer of org source block (%s)."
			 (upcase ,lang)))
	     (if (fboundp ',edit-pre)
		(advice-add ',edit-pre :after ',intern-pre)
	      (progn
		(defun ,edit-pre (info)
		  (,intern-pre info))
		(put ',edit-pre 'function-documentation
		     (format "Prepare local buffer environment for org source block (%s)."
			     (upcase ,lang))))))))
      (defvar org-babel-lang-list
	'("go" "python" "ipython" "bash" "sh" "C"))
      (dolist (lang org-babel-lang-list)
	(eval `(lsp-org-babel-enable ,lang)))    
      
    #+end_src


    =Lui fait tout lag dans lsp à ne pas mettre !!!=
  #+begin_src emacs-lisp 
	
    ;;     (require 'lsp-mode)
    ;; (with-eval-after-load 'lsp-mode
    ;;   (let ((trace-buf "*trace*")
    ;;         (ctx
    ;;          (lambda ()
    ;;            (format
    ;;             " <+<%s|+|%s|+|%s|+|%s|+|%s>+>"
    ;;             (buffer-name)
    ;;             (local-variable-p 'lsp--cur-workspace)
    ;;             (local-variable-p 'lsp--buffer-workspaces)
    ;;             lsp--cur-workspace lsp--buffer-workspaces)))
    ;;         (watcher
    ;;          (lambda (symbol newval operation where)
    ;;           (let ((buf (buffer-name)))
    ;;             (with-current-buffer "*trace*"
    ;;               (goto-char (point-max))
    ;;               (insert (format "==>> %s|-|%s|-|%s|-|%s|-|%s|-|%s\n"
    ;;                               buf where symbol
    ;;                               (local-variable-p symbol)
    ;;                               operation (if newval "*val*")))
    ;;               ;; (when (and (not (string-match-p "\.rs$" buf))
    ;;               ;;            )
    ;;               ;;   (error "open back trace 1"))
    ;;               ))
    ;;           ;; (when (string= operation "makunbound")
    ;;           ;;   (error "open back trace 2"))
    ;;           ;; (when (and (eq symbol 'lsp--buffer-workspaces)
    ;;           ;;            (string= operation "set")
    ;;           ;;            (if newval t))
    ;;           ;;   (error "open back trace 3"))
    ;;           ))
    ;;         )
    
    ;;     (get-buffer-create trace-buf)
    
    ;;     (trace-function-background 'lsp-feature? trace-buf ctx)
    ;;     (trace-function-background 'lsp--find-workspaces-for trace-buf ctx)
    ;;     (add-variable-watcher 'lsp--cur-workspace watcher)
    ;;     (add-variable-watcher 'lsp--buffer-workspaces watcher)
    ;;     ))
    
	
  #+end_src



  



    
** TODO Pour les couleurs checkbox quand on coche
:PROPERTIES:
:CREATED:  <2021-09-16 jeu. 23:20>
:END:

#+begin_src emacs-lisp





  (defface org-checkbox-todo-text
    '((t (:inherit org-todo)))
    "Face for the text part of an unchecked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?: \\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-checkbox-todo-text prepend))
   'append)

  (defface org-checkbox-done-text
    '((t (:inherit org-done)))
    "Face for the text part of a checked org-mode checkbox.")

  (font-lock-add-keywords
   'org-mode
   `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-checkbox-done-text prepend))
   'append)



  #+end_src
  
  


** Pour savoir la memory utilisée

#+begin_src emacs-lisp 

(defun ap/garbage-collect ()
  "Run `garbage-collect' and print stats about memory usage."
  (interactive)
  (message (cl-loop for (type size used free) in (garbage-collect)
                    for used = (* used size)
                    for free = (* (or free 0) size)
                    for total = (file-size-human-readable (+ used free))
                    for used = (file-size-human-readable used)
                    for free = (file-size-human-readable free)
                    concat (format "%s: %s + %s = %s\n" type used free total))))

#+end_src




** Hook pour envoyer automatiquement les done du fichier inbox dans archives

#+begin_src emacs-lisp 


#+end_src


** Smiley !!!! 

#+begin_src emacs-lisp 
    
    
    (use-package emojify
    :hook (after-init . global-emojify-mode)
    )
    
    
#+end_src


** Pour les sites avec org-mode

#+begin_src emacs-lisp 

(use-package simple-httpd)

#+end_src


** Rapidement changer de dark and light theme

#+begin_src emacs-lisp 
  
  
  (use-package heaven-and-hell
  :init
  
  (setq heaven-and-hell-theme-type 'dark) ;; Omit to use light by default
  
  (setq heaven-and-hell-themes
	'((light . doom-moonlight)
	  (dark . doom-acario-dark))) ;; Themes can be the list: (dark . (tsdh-dark wombat))
  
  ;; Optionall, load themes without asking for confirmation.
  (setq heaven-and-hell-load-theme-no-confirm t)
  
  :hook (after-init . heaven-and-hell-init-hook)
  :bind (("C-c <f6>" . heaven-and-hell-load-default-theme)
	 ;; ("<f6>" . heaven-and-hell-toggle-theme)
	 ))
  
  
  
#+end_src


** TODO Pour le minuteur marche direct (org-timer-set-timer)
:PROPERTIES:
:CREATED:  <2021-09-30 jeu. 18:13>
:END:

#+begin_src emacs-lisp
  
  ;; (add-hook 'org-timer-set-hook #'org-clock-in)
  
#+end_src


** ANNULÉ Jolie icones svg (marche pas ?)https://github.com/rougier/svg-lib
CLOSED: [2021-10-02 sam. 11:46]
:PROPERTIES:
:CREATED:  <2021-10-02 sam. 11:46>
:END:









** Compresser et décompresser du zip (mapper sur Z)

#+begin_src emacs-lisp 

(eval-after-load "dired-aux"
   '(add-to-list 'dired-compress-file-suffixes 
                 '("\\.zip\\'" ".zip" "unzip")))

(eval-after-load "dired"
  '(define-key dired-mode-map "z" 'dired-zip-files))
(defun dired-zip-files (zip-file)
  "Create an archive containing the marked files."
  (interactive "sEnter name of zip file: ")

  ;; create the zip file
  (let ((zip-file (if (string-match ".zip$" zip-file) zip-file (concat zip-file ".zip"))))
    (shell-command 
     (concat "zip " 
             zip-file
             " "
             (concat-string-list 
              (mapcar
               '(lambda (filename)
                  (file-name-nondirectory filename))
               (dired-get-marked-files))))))

  (revert-buffer)

  ;; remove the mark on all the files  "*" to " "
  ;; (dired-change-marks 42 ?\040)
  ;; mark zip file
  ;; (dired-mark-files-regexp (filename-to-regexp zip-file))
  )

(defun concat-string-list (list) 
   "Return a string which is a concatenation of all elements of the list separated by spaces" 
    (mapconcat '(lambda (obj) (format "%s" obj)) list " ")) 

#+end_src





** Vue calendrier org calendar

[[https://github.com/kiwanami/emacs-calfw][lien ici pour les bindings]]


  cfw:open-org-calendar
  
#+begin_src emacs-lisp 
  
  
  (use-package calfw)
  (use-package calfw-org)
  
  
  
#+end_src


** Python dans le même buffer

#+begin_src emacs-lisp 
  
  (add-to-list 'display-buffer-alist 
  '("^\\*Python\\*$" . (display-buffer-same-window)))
  
  
  (defun my-py-execute-buffer ()
  (interactive)
  (set 'code-buffer (current-buffer))
  (unless (get-buffer "*Python*")
    (py-shell)
    (set-buffer code-buffer)
    (sleep-for 0.2))
  (py-execute-buffer))
  
  
#+end_src



** ANNULÉ Org super agenda (dashboard)
CLOSED: [2021-10-19 Tue 20:04]

#+begin_src emacs-lisp :tangle no
  
  
  (use-package org-super-agenda
    :config
    
    (let ((org-super-agenda-groups
	   '(;; Each group has an implicit boolean OR operator between its selectors.
	     (:name "Today"  ; Optionally specify section name
		    :time-grid t  ; Items that appear on the time grid
		    :todo "TODAY")  ; Items that have this TODO keyword
	     (:name "Important"
		    ;; Single arguments given alone
		    :tag "bills"
		    :priority "A")
	     ;; Set order of multiple groups at once
	     (:order-multi (2 (:name "Shopping in town"
				     ;; Boolean AND group matches items that match all subgroups
				     :and (:tag "shopping" :tag "@town"))
			      (:name "Food-related"
				     ;; Multiple args given in list with implicit OR
				     :tag ("food" "dinner"))
			      (:name "Personal"
				     :habit t
				     :tag "personal")
			      (:name "Space-related (non-moon-or-planet-related)"
				     ;; Regexps match case-insensitively on the entire entry
				     :and (:regexp ("space" "NASA")
						   ;; Boolean NOT also has implicit OR between selectors
						   :not (:regexp "moon" :tag "planet")))))
	     ;; Groups supply their own section names when none are given
	     (:todo "WAITING" :order 8)  ; Set order of this section
	     (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
		    ;; Show this group at the end of the agenda (since it has the
		    ;; highest number). If you specified this group last, items
		    ;; with these todo keywords that e.g. have priority A would be
		    ;; displayed in that group instead, because items are grouped
		    ;; out in the order the groups are listed.
		    :order 9)
	     (:priority<= "B"
			  ;; Show this section after "Today" and "Important", because
			  ;; their order is unspecified, defaulting to 0. Sections
			  ;; are displayed lowest-number-first.
			  :order 1)
	     ;; After the last group, the agenda will display items that didn't
	     ;; match any of these groups, with the default order position of 99
	     )))
      (org-agenda nil "a"))
    
    
    )
  
  
#+end_src


** Gérer les contacts (utiliser org contact pour l'instant, enfin google)

linkedin + ddbd [[Emacs + LinkedIn: Another totally idiosyncratic bit of code][ici]]

Import csv into Emacs’s bbdb contact database

Works out of the box with csv exported from Thunderbird, Gmail Linkedin, Outlook.com/hotmail, and probably others. lien [[https://github.com/emacsmirror/bbdb-csv-import][ici]]

*** Vcard (.vcf files to .org : org-vcards)
#+begin_src emacs-lisp 
  
  (use-package org-vcard
    :config
    (setq org-vcard-default-version "3.0") ;;la version utilisée (pour pouvoir y envoyer sur google)
    (setq org-vcard-default-export-file "/home/msi/contactpourgoogle.vcf")
    )
  
#+end_src


*** bbdb, faire le switch un jour avec [[https://github.com/girzel/ebdb][ebdb]]. [[http://www.linux-france.org/article/appli/emacs/bbdb/bbdb-4.html][Tuto]] de bbdb

**** Le moteur
Pourquoi pas maintenant ? pas encore la fonctionnalité de bien exporté en vcf . Et je pourrais tel avec bbdb !
on peut envoyer des mails. [[https://github.com/emacsmirror/bbdb-sms/blob/master/bbdb-sms.el][sms ?]]

Téléphoner avec ddbd [[https://www.math.ucdavis.edu/~mkoeppe/bbdb-isdnlog-estic/lcr.html][ici]]




  #+begin_src emacs-lisp 
    
    ;; (require 'org-crypt)
    
    
    
    
    ;;le fichier se trouve à /home/msi/.emacs.d/var/bbdb/bbdb.el
    (use-package bbdb
      :config
      ;;If you don't live in Northern America, you should disable the
      ;;syntax check for telephone numbers by saying
      (setq bbdb-north-american-phone-numbers-p nil)
      ;;Tell bbdb about your email address:
      ;; (setq bbdb-user-mail-names
      ;; (regexp-opt '("Your.Email@here.invalid"
      ;; "Your.other@mail.there.invalid")))
      ;;cycling while completing email addresses
      (setq bbdb-complete-name-allow-cycling t)
      ;; permet d'eviter d'avoir une fenetre bbdb qui montre en permanence
      ;; les mises a jour dans bbdb lorsque l'on utilise VM, MH, RMAIL ou
      ;; GNUS
      (setq bbdb-use-pop-up nil)
    
      ;;      pas de code de localisation par defaut pour les numeros de
      ;; telephone
      ;; mettre ça de base, ne marche pas
      (setq bbdb-default-area-code "33")
    
      ;; permet d'empecher a bbdb de creer une nouvelle entree a chaque fois
      ;; qu'un mail d'une nouvelle personne est lu avec GNUS, RMAIL, VM ou
      ;; MH. 
      (setq bbdb/mail-auto-create-p nil)
    
    
      ;; nombre de lignes desire dans la fenetre popup de bbdb lorsque l'on
      ;; utilise VM/MH/RMAIL ou GNUS.
      (setq bbdb-pop-up-target-lines 7)
    
      ;;pour importer les contacts à chaque lancement emacs, mettre le bon fichi :
    
    
    
    
    
      )
    
    
    
    
    ;; (use-package ebdb)
    
    
    
    
  #+end_src

**** Bbd vcard (pour les export et import .vcf)

#+begin_src emacs-lisp 

(use-package bbdb-vcard
      :config
    
      ;; (setq bbdb-vcard-directory "~/home/msi/Dossier_partage//")
      ;; dossier par défaut
      (setq bbdb-vcard-default-dir "/home/msi/Dossier_partage_nous_deux/Clement/Test/")
      )

#+end_src


**** Syncro automatique (plus qu'à exporter sur tel)




  


#+begin_src emacs-lisp 
  
  (with-eval-after-load 'bbdb-vcard
  
  
	  ;; (bbdb-vcard-import-file "/home/msi/Dossier_partage/Contacts.vcf")
  
    
	  ;; (delete-file "/home/msi/Dossier_partage/Contactscopie.vcf")
	  ;; (copy-file "/home/msi/Dossier_partage/Contacts.vcf" "/home/msi/Dossier_partage/Contactscopie.vcf")
	;; (delete-file "/home/msi/Dossier_partage/Contacts.vcf")
  
  
	  )
  
#+end_src

**** Sms avec bbdb ?

#+begin_src emacs-lisp 
  
  (use-package sms)
  
  (use-package bbdb-sms
    :after bbdb sms
    )
  
#+end_src

*** Intégration de bbdb avec les mails (juste faire un tab avec le nom) ainsi que conversion en .vcf. Voir [[https://github.com/DamienCassou/vdirel][ceci]], très fort

#+begin_src emacs-lisp 

  (setq bbdb-mail-user-agent 'mu4e-user-agent)
  (setq mu4e-view-mode-hook 'bbdb-mua-auto-update)
  (setq mu4e-compose-complete-addresses nil)
  (setq bbdb-mua-pop-up t)
  (setq bbdb-mua-pop-up-window-size 5)
  (setq mu4e-view-show-addresses t)

#+end_src


*** ebdbd

#+begin_src emacs-lisp 
  
  (use-package ebdb
    :config
    (setq ebdb-anniversary-ymd-format "%Y-%B-%d")
    (setq org-agenda-include-diary 1)
    (require 'ebdb)
    (require 'ebdb-vcard)
    )
  
#+end_src

** Sudo sur les fichiers

#+begin_src emacs-lisp 

(use-package sudo-edit)

#+end_src


** TODO [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/#automatically-copy-or-move-completed-tasks-to-dailies][Automatically copy (or move) completed tasks to dailies]]

#+begin_src emacs-lisp 

#+end_src

(defun my/org-roam-copy-todo-to-today ()
  (interactive)
  (let ((org-refile-keep t) ;; Set this to nil to delete the original!
        (org-roam-dailies-capture-templates
          '(("t" "tasks" entry "%?"
             :target (file+head+olp "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n" ("Tasks")))))
        (org-after-refile-insert-hook #'save-buffer)
        today-file
        pos)
    (save-window-excursion
      (org-roam-dailies--capture (current-time) t)
      (setq today-file (buffer-file-name))
      (setq pos (point)))

    ;; Only refile if the target file is different than the current file
    (unless (equal (file-truename today-file)
                   (file-truename (buffer-file-name)))
      (org-refile nil nil (list "Tasks" today-file nil pos)))))

(add-to-list 'org-after-todo-state-change-hook
             (lambda ()
               (when (equal org-state "DONE")
                 (my/org-roam-copy-todo-to-today))))



		 

** Bibtex

*** Les variables

#+begin_src emacs-lisp 
  
  
    ;; BibLaTeX settings
  ;; bibtex-mode
  (setq bibtex-dialect 'biblatex)

  
  (setq bib-files-directory (directory-files
			     (concat (getenv "HOME") "/Notes/Référencesbib/") t
			     "^[A-Z|a-z].+.bib$")
	pdf-files-directory (concat (getenv "HOME") "/Notes/Référencesbib/"))
  
  
  
#+end_src

*** Helm bibtex

#+begin_src emacs-lisp 
  
  (with-eval-after-load 'helm
  (define-key helm-map [remap next-line] #'helm-next-line)
  (define-key helm-map  [remap previous-line] #'helm-previous-line)
  )
  
  ;; (use-package helm-bibtex
  ;;   :config
  ;;   (require 'helm-config)
  ;;   (setq bibtex-completion-bibliography bib-files-directory
  ;; 	bibtex-completion-library-path pdf-files-directory
  ;; 	bibtex-completion-pdf-field "File"
  ;; 	bibtex-completion-notes-path org-directory))
  
#+end_src

*** Org-ref, pour les ref scientifiques

#+begin_src emacs-lisp
  
  (setq org-directory "~/Notes")
  
  
  (use-package org-ref
    :config
     (setq
      org-ref-completion-library 'org-ref-helm-cite
       org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
       org-ref-default-bibliography bib-files-directory
       org-ref-notes-directory org-directory
       org-ref-notes-function 'orb-edit-notes)
     )
  
#+end_src


*** Org roam bibtex

#+begin_src emacs-lisp 
    
      (use-package org-roam-bibtex
	:after (org-roam helm-bibtex)
	:bind (:map org-mode-map ("C-c n b" . orb-note-actions))
	:config
	(require 'org-ref)
	(org-roam-bibtex-mode)
	)
	
    
#+end_src


** Org transclusion, insérer du texte directement dans org, super avec org roam !


https://github.com/nobiot/org-transclusion comment s'en servir


# #+tnasclude : [[[file:..]]] :lines 4-9

#+begin_src emacs-lisp 
  
  

  
  (use-package org-transclusion
    :after org
    :straight '(org-transclusion
		:host github
		:repo "nobiot/org-transclusion"
		:branch "main"
		:files ("*.el"))
    ;; :config  
    ;; (define-key global-map (kbd "<f12>") #'org-transclusion-add)
    ;; (define-key global-map (kbd "C-n t") #'org-transclusion-mode)
  
    )
  
  
#+end_src



** Gérer les fichiers à la corbeille

#+begin_src emacs-lisp 

(use-package trashed)

#+end_src


** org-linkz, pour gérer les marques pages depuis org mode, lien [[https://github.com/p-kolacz/org-linkz][ici]]

Se trouve dans dossier partagé/Clément/


À mettre dans les raccourcis firefox :

Pour voir le fichier, et donc accéder au raccourcis :
file:///home/msi/Dossier_partage_nous_deux/Clement/org-linkz/3Bookmarks.html

Pour ajouter un favoris avec org protocol :
(bug d'affichage mais normalement marche)
#+begin_src json
javascript:location.href='org-protocol://capture?template=o&url='+encodeuricomponent(location.href)+'&title='+encodeuricomponent(document.title)+'&body='+encodeuricomponent(window.getselection())
#+end_src



/home/msi/Dossier_partage_nous_deux/Clement/org-linkz/3Bookmarks.org
/home/msi/Notes/Roam/GTD/3Bookmarks.org
#+begin_src emacs-lisp 
  
  
  ;;ma fonction pour enregistrer mes raccourcis dans orgzly, plus besoin
  
  (defun cp/copy-bookmarks-to-org-linkz ()
    (delete-file "/home/msi/Dossier_partage_nous_deux/Clement/org-linkz/3Bookmarks.org")
    (copy-file "/home/msi/Notes/Roam/GTD/3Bookmarks.org" "/home/msi/Dossier_partage_nous_deux/Clement/org-linkz/3Bookmarks.org")
    )
  
  (server-start)  ;; starts emacs as server (if you didn't already)
  (setq org-html-validation-link nil)  ;; removes validation link from exported html file
  (require 'org-protocol)
  
  
  ;; load the packaged named xyz.
  ;; (require org-linkz) ;; best not to include the ending “.el” or 
  
  
  
#+end_src


** Collaborative notes avec org-mode ([[https://floobits.com/help/plugins/emacs][ici]])



#+begin_src emacs-lisp 

(use-package floobits)

#+end_src


** CANCELLED Interface Calibre, trop de temps
CLOSED: [2022-01-14 Fri 17:22]


*** LeMoteur
[[https://github.com/chenyanming/calibredb.el/tree/cb93563d0ec9e0c653210bc574f9546d1e7db437][ici]]

#+begin_src emacs-lisp :tangle no
  
  (use-package calibredb
    :defer t
    :config
    (setq calibredb-root-dir "/home/msi/Documents/BibliothèqueCalibre")
    (setq calibredb-db-dir (expand-file-name "metadata.db" calibredb-root-dir))
    ;; (setq calibredb-library-alist '(("~/OneDrive/Org/Doc/Calibre")
    ;; ("~/Documents/Books Library")
    ;; ("~/Documents/LIB1")
    ;; ("/Volumes/ShareDrive/Documents/Library/")))
  

  ;; To enable all-the-icons:
  (setq calibredb-format-all-the-icons t)
  
    
  
    )
  
  
#+end_src


*** La configuration des touches

#+begin_src emacs-lisp :tangle no

(defvar calibredb-show-mode-map
      (let ((map (make-sparse-keymap)))
	(define-key map "?" #'calibredb-entry-dispatch)
	(define-key map "o" #'calibredb-find-file)
	(define-key map "O" #'calibredb-find-file-other-frame)
	(define-key map "V" #'calibredb-open-file-with-default-tool)
	(define-key map "s" #'calibredb-set-metadata-dispatch)
	(define-key map "e" #'calibredb-export-dispatch)
	(define-key map "q" #'calibredb-entry-quit)
	(define-key map "y" #'calibredb-yank-dispatch)
	(define-key map "," #'calibredb-quick-look)
	(define-key map "." #'calibredb-open-dired)
	(define-key map "\M-/" #'calibredb-rga)
	(define-key map "\M-t" #'calibredb-set-metadata--tags)
	(define-key map "\M-a" #'calibredb-set-metadata--author_sort)
	(define-key map "\M-A" #'calibredb-set-metadata--authors)
	(define-key map "\M-T" #'calibredb-set-metadata--title)
	(define-key map "\M-c" #'calibredb-set-metadata--comments)
	map)
      "Keymap for `calibredb-show-mode'.")
  
    (defvar calibredb-search-mode-map
      (let ((map (make-sparse-keymap)))
	(define-key map [mouse-3] #'calibredb-search-mouse)
	(define-key map (kbd "<RET>") #'calibredb-find-file)
	(define-key map "?" #'calibredb-dispatch)
	(define-key map "a" #'calibredb-add)
	(define-key map "A" #'calibredb-add-dir)
	(define-key map "c" #'calibredb-clone)
	(define-key map "d" #'calibredb-remove)
	(define-key map "D" #'calibredb-remove-marked-items)
	(define-key map "j" #'calibredb-next-entry)
	(define-key map "k" #'calibredb-previous-entry)
	(define-key map "l" #'calibredb-virtual-library-list)
	(define-key map "L" #'calibredb-library-list)
	(define-key map "n" #'calibredb-virtual-library-next)
	(define-key map "N" #'calibredb-library-next)
	(define-key map "p" #'calibredb-virtual-library-previous)
	(define-key map "P" #'calibredb-library-previous)
	(define-key map "s" #'calibredb-set-metadata-dispatch)
	(define-key map "S" #'calibredb-switch-library)
	(define-key map "o" #'calibredb-find-file)
	(define-key map "O" #'calibredb-find-file-other-frame)
	(define-key map "v" #'calibredb-view)
	(define-key map "V" #'calibredb-open-file-with-default-tool)
	(define-key map "," #'calibredb-quick-look)
	(define-key map "." #'calibredb-open-dired)
	(define-key map "y" #'calibredb-yank-dispatch)
	(define-key map "b" #'calibredb-catalog-bib-dispatch)
	(define-key map "e" #'calibredb-export-dispatch)
	(define-key map "r" #'calibredb-search-refresh-and-clear-filter)
	(define-key map "R" #'calibredb-search-clear-filter)
	(define-key map "q" #'calibredb-search-quit)
	(define-key map "m" #'calibredb-mark-and-forward)
	(define-key map "f" #'calibredb-toggle-favorite-at-point)
	(define-key map "x" #'calibredb-toggle-archive-at-point)
	(define-key map "h" #'calibredb-toggle-highlight-at-point)
	(define-key map "u" #'calibredb-unmark-and-forward)
	(define-key map "i" #'calibredb-edit-annotation)
	(define-key map (kbd "<DEL>") #'calibredb-unmark-and-backward)
	(define-key map (kbd "<backtab>") #'calibredb-toggle-view)
	(define-key map (kbd "TAB") #'calibredb-toggle-view-at-point)
	(define-key map "\M-n" #'calibredb-show-next-entry)
	(define-key map "\M-p" #'calibredb-show-previous-entry)
	(define-key map "/" #'calibredb-search-live-filter)
	(define-key map "\M-t" #'calibredb-set-metadata--tags)
	(define-key map "\M-a" #'calibredb-set-metadata--author_sort)
	(define-key map "\M-A" #'calibredb-set-metadata--authors)
	(define-key map "\M-T" #'calibredb-set-metadata--title)
	(define-key map "\M-c" #'calibredb-set-metadata--comments)
	map)
      "Keymap for `calibredb-search-mode'.")

#+end_src

*** La configuration des menus


#+begin_src emacs-lisp :tangle no
  
  (require 'calibredb-core)
  
    (transient-define-prefix calibredb-dispatch ()
    "Invoke a calibredb command from a list of available commands in *calibredb-search*."
    :man-page "calibredb"
    ["File operation"
     [("a" "Add a file"   calibredb-add)
      ("A" "Add a directory"   calibredb-add-dir)
      ("d" "Remove a file"   calibredb-remove)
      ("e" "Export" calibredb-export-dispatch)
      ("s" "set_metadata"   calibredb-set-metadata-dispatch)
      ("f" "filter"   calibredb-filter-dispatch)
      ("o" "sort"   calibredb-sort-dispatch)]
     [("RET" "Open file"         calibredb-find-file)
      ("O" "Open file other frame"            calibredb-find-file-other-frame)
      ("v" "View details"  calibredb-view)
      ("V" "Open file with default tool"  calibredb-open-file-with-default-tool)
      ("," "Quick Look"  calibredb-quick-look)
      ("." "Open dired"  calibredb-open-dired)]
     [("m" "Mark" calibredb-mark-and-forward)
      ("u" "Unmark and forward" calibredb-unmark-and-forward)
      ("DEL" "Unmark and backward" calibredb-unmark-and-backward)
      ("*" "Favorite" calibredb-toggle-favorite-at-point)
      ("h" "Highlight" calibredb-toggle-highlight-at-point)
      ("x" "Archive" calibredb-toggle-archive-at-point)]]
    ["Library operation"
     [("l" "List Virtual Libraries"   calibredb-virtual-library-list)
      ("n" "Next Virtual Library"   calibredb-virtual-library-next)
      ("p" "Previous Virtual Library"   calibredb-virtual-library-previous)]
     [("L" "List Libraries"   calibredb-library-list)
      ("N" "Next Library"   calibredb-library-next)
      ("P" "Previous Library"   calibredb-library-previous)
      ("S" "Switch Library"   calibredb-switch-library)]
     [("c" "Clone Library"   calibredb-clone)
      ("r" "Refresh Library"   calibredb-search-refresh-and-clear-filter)
      ("R" "Clear Filter"   calibredb-search-clear-filter)
      ("t" "Toggle view (Compact/Detail)"   calibredb-toggle-view)]]
    ["Other operation"
     [("b" "BibTex"   calibredb-catalog-bib-dispatch)
      ("i" "Edit Annotation" calibredb-edit-annotation)]
     [("'" "Search with rga" calibredb-rga)
      ("/" "Live Filter" calibredb-search-live-filter)]
     [("y" "Yank" calibredb-yank-dispatch)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-entry-dispatch ()
    "Invoke a calibredb command from a list of available commands in *calibredb-entry*."
    :man-page "calibredb"
    ["File operation"
     [("o" "Open file"         calibredb-find-file)
      ("O" "Open file other frame"            calibredb-find-file-other-frame)
      ("V" "Open file with default tool"  calibredb-open-file-with-default-tool)
      ("." "Quick Look"  calibredb-quick-look)
      ("." "Open dired"  calibredb-open-dired)]
     [("e" "Export" calibredb-export-dispatch)
      ("s" "set_metadata"   calibredb-set-metadata-dispatch)
      ("y" "Yank"   calibredb-yank-dispatch)
      ("'" "Search with rga" calibredb-rga)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-set-metadata-dispatch ()
    "Dispatch for set-metadata."
    ["Arguments"
     ("-a" "author_sort"  "author_sort:" calibredb-transient-read-metadata-author-sort)
     ("-A" "authors"  "authors:" calibredb-transient-read-metadata-authors)
     ("-c" "comments"  "comments:" calibredb-transient-read-metadata-comments)
     ("-C" "cover" "cover:" calibredb-transient-read-file)
     ("-i" "identifiers"  "identifiers:" calibredb-transient-read-metadata-ids)
     ("-l" "languages"  "languages:" read-string)
     ("-p" "pubdate" "pubdate:" transient-read-date)
     ("-P" "publisher" "publisher:" read-string)
     ("-r" "rating"  "rating:" read-string)
     ("-s" "series" "series:" read-string)
     ("-S" "series_index" "series_index:" read-string)
     ("-h" "size" "size:" read-string)
     ("-H" "sort" "sort:" read-string)
     ("-t" "tags" "tags:" calibredb-transient-read-metadata-tags)
     ("-T" "title" "title:" calibredb-transient-read-metadata-title)
     ("-d" "timestamp" "timestamp:" transient-read-date)]
    [["Single Field"
      ("t" "tags"         calibredb-set-metadata--tags)
      ("T" "title"         calibredb-set-metadata--title)
      ("a" "author_sort"         calibredb-set-metadata--author_sort)
      ("c" "comments"         calibredb-set-metadata--comments)]
     ["Toggle field"
      ("*" "favorite" calibredb-toggle-favorite-at-point)
      ("x" "archive" calibredb-toggle-archive-at-point)
      ("h" "highlight" calibredb-toggle-highlight-at-point)]
     ["Set metadata"
      ("s" "Set metadata With Arguments"         calibredb-set-metadata--transient)
      ("f" "Fetch and set metadata by author and title"  calibredb-fetch-and-set-metadata-by-author-and-title)
      ("i" "Fetch and set metadata by ISBN"  calibredb-fetch-and-set-metadata-by-isbn)
      ("d" "Fetch and set metadata by identifier"  calibredb-fetch-and-set-metadata-by-id)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-filter-dispatch ()
    "Dispatch for filtering the results."
    [["Filter by"
      ("t" "tag"         calibredb-filter-by-tag)
      ("f" "format"         calibredb-filter-by-book-format)
      ("a" "author"         calibredb-filter-by-author-sort)
      ("d" "date"         calibredb-filter-by-last_modified)
      ("l" "library (virtual)"      calibredb-virtual-library-list)
      ("L" "Library"      calibredb-library-list)
      ("r" "reset" calibredb-search-clear-filter)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-sort-dispatch ()
    "Dispatch for sorting the results."
    [["Sort by"
      ("o" "order (toggle)"         calibredb-toggle-order)
      ("i" "id"         calibredb-sort-by-id)
      ("t" "title"      calibredb-sort-by-title)
      ("f" "format"         calibredb-sort-by-format)
      ("a" "author"         calibredb-sort-by-author)
      ("d" "date"      calibredb-sort-by-date)
      ("p" "pubdate"         calibredb-sort-by-pubdate)
      ("T" "Tag"      calibredb-sort-by-tag)
      ("s" "size"      calibredb-sort-by-size)
      ("l" "language"      calibredb-sort-by-language)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-export-dispatch ()
    "Dispatch for export files."
    ["Arguments"
     ("-a" "Do not convert non English characters for the file names"  "--dont-asciiize")
     ("-c" "Do not save cover"  "--dont-save-cover")
     ("-m" "Do not update metadata"  "--dont-update-metadata")
     ("-o" "Do not write opf" "--dont-write-opf")
     ("-f" "Formats to save for each book, comma separated."  "--formats " read-string)
     ("-p" "Progress Reporting"  " --progress")
     ("-r" "Replace whitespace with underscores." "--replace-whitespace")
     ("-s" "Single directory to export all files." "--single-dir")
     ("-t" "Template to control the filename and directory structure."  "--template" read-string)
     ("-d" "Dates format. %d - day, %b - month, %m - month number, %Y - year. Default is: %b, %Y" "--timefmt" read-string)
     ;; ("-m" "Export books to the specified directory. Default is ."  "--to-dir")
     ("-l" "Convert paths to lowercase." "--to-lowercase")
     ("-A" "Export all books in database, ignoring the list of ids" "--all")]
    [["Export"
      ("e" "Export"         calibredb-export)]]
    ;; [["Convert"
    ;;   ("E" "Epub"   calibredb-convert-to-epub-dispatch)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-convert-to-epub-dispatch ()
    "TODO: Dispatch for convert to epub."
    ["Arguments"
     ("-a" "Turn off splitting at page breaks."  "--dont-split-on-page-breaks")
     ("-c" "This option is needed only if you intend to use the EPUB with FBReaderJ."  "--epub-flatten")
     ("-m" "Insert an inline Table of Contents that will appear as part of the main book content."  "--epub-inline-toc")
     ("-o" "Put the inserted inline Table of Contents at the end of the book instead of the start." "--epub-toc-at-end")
     ("-f" "The version of the EPUB file to generate."  "--epub-version")
     ("-p" "Extract the contents of the generated EPUB file to the specified directory. "  "--extract-to")
     ("-r" "Split all HTML files larger than this size (in KB). " "--flow-size")
     ("-s" "This option disables the generation of this cover." "--no-default-epub-cover")
     ("-t" "Do not use SVG for the book cover."  "--no-svg-cover")
     ("-d" "When using an SVG cover, this option will cause the cover to scale to cover the available screen area, but still preserve its aspect ratio (ratio of width to height)" "--preserve-cover-aspect-ratio")
     ("-l" "If specified, the output plugin will try to create output that is as human readable as possible." "--pretty-print")
     ("-A" "Title for any generated in-line table of contents." "--toc-title")]
    [["Export"
      ("e" "Export" calibredb-convert)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-catalog-bib-dispatch ()
    "Dispatch for catalog BibTex."
    ["Arguments"
     ("-f" "The fields (comma-separated) to output. Default: all" "--fields " calibredb-transient-read-bib-fields)
     ("-t" "Entry type for BibTeX catalog. Default: book"  "--entry-type " calibredb-transient-read-entry-type)
     ("-s" "Output field to sort on. Default: id" "--sort-by " calibredb-transient-read-bib-sort-by)
     ("-c" "Create a citation for BibTeX entries. Default: True"  " --create-citation " calibredb-transient-read-bib-create-citation)
     ("-p" "Create a file entry if formats is selected for BibTeX entries. Default: True"  "--add-files-path " calibredb-transient-read-bib-add-files-path)
     ("-T" "The template for citation creation from database fields. Default: {authors}{id}" "--citation-template " calibredb-transient-read-bib-citation-template)
     ("-e" "BibTeX file encoding output. Default: utf8"  "--choose-encoding " calibredb-transient-read-choose-encoding)
     ("-E" "BibTeX file encoding flag. Default: strict"  "--choose-encoding-configuration " calibredb-transient-read-choose-encoding-configuration)]
    [["Bibtex"
      ("o" "Find BibTex file"         calibredb-find-bib)
      ("b" "Update BibTex file"         calibredb-catalog-bib--transient)]]
    [("q" "Quit"   transient-quit-one)])
  
  (transient-define-prefix calibredb-yank-dispatch ()
    "Invoke a Yank operation."
    :man-page "calibredb"
    ["Yank operaion"
     [("y" "Copy as calibredb org links"         calibredb-org-link-copy)
      ("f" "Copy as file org links"              calibredb-copy-as-org-link)]]
    [("q" "Quit"   transient-quit-one)])
  
  
#+end_src


** Jouer un son au démarrage d'emacs pour me faire penser à qqch, ou juste la fonction

#+begin_src emacs-lisp 
  
  
  ;; (with-eval-after-load 'emms
  
  ;;   (add-hook 'dashboard-mode-hook 'sound-after-start)
  ;;   (defun sound-after-start ()
  ;;     (interactive)
  ;;     (emms-play-file "/home/msi/.emacs.d/sondemarrage.mp3")
  ;;     )
  ;;   )
  
  
  (with-eval-after-load 'org-roam
  
    (defun org-roam-node-random-after-start ()
      ;; (interactive)
  
      (split-window-right)
      (xah-next-window-or-frame)
      (org-roam-node-random)
      (xah-next-window-or-frame)
      )
    )
  
  (add-hook 'emacs-startup-hook #'org-roam-node-random-after-start)
  
  
#+end_src


** Processing 3 (cours)

#+begin_src emacs-lisp 
  
  (use-package processing-mode)
  (add-to-list 'auto-mode-alist '("\\.pde\\'" . processing-mode))

  
  (setq processing-location "/home/msi/Téléchargements/processing-3.5.4/processing-java")
  
#+end_src


** Présentation avec org mode


#+begin_src emacs-lisp 
  
(use-package org-tree-slide
  :custom
  (org-image-actual-width nil))
  
#+end_src

  
(use-package hide-mode-line)

(defun efs/presentation-setup ()
  ;; Hide the mode line
  (hide-mode-line-mode 1)

  ;; Display images inline
  (org-display-inline-images) ;; Can also use org-startup-with-inline-images

  ;; Scale the text.  The next line is for basic scaling:
  (setq text-scale-mode-amount 3)
  (text-scale-mode 1))

  ;; This option is more advanced, allows you to scale other faces too
  ;; (setq-local face-remapping-alist '((default (:height 2.0) variable-pitch)
  ;;                                    (org-verbatim (:height 1.75) org-verbatim)
  ;;                                    (org-block (:height 1.25) org-block))))

(defun efs/presentation-end ()
  ;; Show the mode line again
  (hide-mode-line-mode 0)

  ;; Turn off text scale mode (or use the next line if you didn't use text-scale-mode)
  ;; (text-scale-mode 0))

  ;; If you use face-remapping-alist, this clears the scaling:
  (setq-local face-remapping-alist '((default variable-pitch default))))

(use-package org-tree-slide
  :hook ((org-tree-slide-play . efs/presentation-setup)
         (org-tree-slide-stop . efs/presentation-end))
  :custom
  (org-tree-slide-slide-in-effect t)
  (org-tree-slide-activate-message "Presentation started!")
  (org-tree-slide-deactivate-message "Presentation finished!")
  (org-tree-slide-header t)
  (org-tree-slide-breadcrumbs " > ")
  (org-image-actual-width nil))



  
** CANCELLED Org super agenda (un jour ?)
CLOSED: [2022-01-23 Sun 14:12]

#+begin_src emacs-lisp :tangle no
  
  (use-package org-super-agenda
  ;; :config
  )
  
  
  (let ((org-agenda-custom-commands
       '(("u" "Super view"
	  ((agenda "" ( (org-agenda-span 1)
		       (org-super-agenda-groups
			'((:name "Today"
				 :tag ("bday" "ann" "hols" "cal" "today")
				 :time-grid t
				 :todo ("WIP")
				 :deadline today)
			  (:name "Perso"
				 :tag "perso")
			  (:name "Overdue"
				 :deadline past)
			  (:name "Reschedule"
				 :scheduled past)
			  (:name "Due Soon"
				 :deadline future)
			  ))))
	   (tags (concat "w" (format-time-string "%V")) ((org-agenda-overriding-header  (concat "ToDos Week " (format-time-string "%V")))
			(org-super-agenda-groups
			 '((:discard (:deadline t))
			   (:name "Perso"
				  :tag "perso")
			   (:name "Loka"
				  :tag "loka")
			   (:name "Ping"
				  :tag "ping")
			   ))))
	   )))))
    (org-agenda nil "u"))
  
  
  
  
  (let ((org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
	 (:name "Today"  ; Optionally specify section name
		:time-grid t  ; Items that appear on the time grid
		:todo "TODAY")  ; Items that have this TODO keyword
	 (:name "Important"
		;; Single arguments given alone
		:tag "bills"
		:priority "A")
	 ;; Set order of multiple groups at once
	 (:order-multi (2 (:name "Shopping in town"
				 ;; Boolean AND group matches items that match all subgroups
				 :and (:tag "shopping" :tag "@town"))
			  (:name "Food-related"
				 ;; Multiple args given in list with implicit OR
				 :tag ("food" "dinner"))
			  (:name "Personal"
				 :habit t
				 :tag "personal")
			  (:name "Space-related (non-moon-or-planet-related)"
				 ;; Regexps match case-insensitively on the entire entry
				 :and (:regexp ("space" "NASA")
					       ;; Boolean NOT also has implicit OR between selectors
					       :not (:regexp "moon" :tag "planet")))))
	 ;; Groups supply their own section names when none are given
	 (:todo "WAITING" :order 8)  ; Set order of this section
	 (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
		;; Show this group at the end of the agenda (since it has the
		;; highest number). If you specified this group last, items
		;; with these todo keywords that e.g. have priority A would be
		;; displayed in that group instead, because items are grouped
		;; out in the order the groups are listed.
		:order 9)
	 (:priority<= "B"
		      ;; Show this section after "Today" and "Important", because
		      ;; their order is unspecified, defaulting to 0. Sections
		      ;; are displayed lowest-number-first.
		      :order 1)
	 ;; After the last group, the agenda will display items that didn't
	 ;; match any of these groups, with the default order position of 99
	 )))
  (org-agenda nil "a"))
  
#+end_src



** Configuration ailleurs




#+begin_src emacs-lisp 
    
    
    ;; Tell emacs where is my personal elisp lib dir
    (add-to-list 'load-path "~/.emacs.d/lisp/")
    
    (require 'test)
    
#+end_src


** Org id create à chaque fois

Pourquoi utiliser des ID ? Tout simplement car cela marchera sur orgzly, et de plus les liens fonctionneront toujours

#+begin_src emacs-lisp 

  (setq org-id-link-to-org-use-id t)

#+end_src



** Vitesse booste ?




#+begin_src emacs-lisp 
  
  ;; Resizing the Emacs frame can be a terribly expensive part of changing the
  ;; font. By inhibiting this, we halve startup times, particularly when we use
  ;; fonts that are larger than the system default (which would resize the frame).
  (setq frame-inhibit-implied-resize t)
  
  (add-to-list 'default-frame-alist '(font . "Fira Code-14"))
  (setq frame-inhibit-implied-resize t)
  
  
#+end_src



** Controlf, pas utilisé mais peut-être pratique

#+begin_src emacs-lisp 
  
  (use-package ctrlf)
  
  
  (define-key ctrlf-mode-map [remap next-line] #'ctrlf-next-match)
  (define-key ctrlf-mode-map [remap previous-line] #'ctrlf-previous-match)
  
#+end_src

* Vérification

#+begin_src emacs-lisp 

(tool-bar-mode -1)

#+end_src

    
